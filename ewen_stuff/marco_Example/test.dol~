logic CASL

spec Pair  = 
     sort S
     free type Pair ::= pair(first:S,second:S)
end

%% In order to make this work, the weakening here
%% is the lack of recursion

spec Linked_list =
     sorts S1,S2
     free types List  ::=
	  nil | cons(head:? S1,tail:? S2)
end



spec Gen  = 
     sort S1
     sort S2
end

view I1: Gen to Pair = 
     S1 |-> Pair,
     S2 |-> S

view I2: Gen to Linked_list = 
     S1 |-> S2,
     S2 |-> List



spec Colimit1 = 
     combine I1,I2
     with gn_S11 |-> Data,
          gn_S12 |-> Pair,
          S2 |-> Tree,
          head |-> node_data,
          tail |-> leaves,
          cons |-> tree_cons,
          first |-> left,
          second |-> right

spec Blend = 
    sort Data
    free types
       Tree ::= nil | tree_cons(data:?Data,leaves:?Pair);
       Pair ::= pair(left:Tree,right:Tree) 
end