logic CASL

spec Rotation180 =
  free type Side ::= left | right
  sorts Elem, Size    
  ops 
    origin: Elem
    side: Elem -> Side
    rotate: Elem * Elem -> Elem
    size: Elem -> Size
    flip: Side -> Side
 forall y:Side
    . flip(left) = right 
    . flip(right) = left  
 forall x:Elem
    . size(rotate(x,origin)) = size(x) 
    . side(rotate(x,origin)) = flip(side(rotate(x,origin)))
end

spec NatSuc = 
   sort Num
   ops zero:Num
       __ + __: Num * Num -> Num
       suc: Num -> Num
   pred 
      __ < __: Num * Num

forall x,y,z: Num
     . not (x<x)
     . x<y /\ y < z => x<z
     . x<y \/ x = y \/ y<x
     . x<y <=> (suc(x) = y \/ exists sx:Num.
                     suc(x)= sx /\ sx < y)
     . suc(x) = y /\ suc(x) = z => y = z
     . suc(x) = suc(y) => x=y
     . exists a: Num . suc(x) = a
     . not (suc(x) = zero)
     . suc(x) = y => zero < y
     . x<y => suc(x) < suc(y)
     . zero + y = y
     . suc(x) + y = suc(x+y)
end

spec Generic = 
  sort X
  ops
     fulchrum: X
end


interpretation I1: Generic to Rotation180 =
   fulchrum |-> origin

interpretation I2: Generic to NatSuc =
   fulchrum |-> zero

spec Blend = combine I1,I2