
spec NatSuc = 
   sort Nat
   sort Element
   op canonical_element: Element
   ops zero:Nat
       s: Element * Nat -> Nat
   op fact: Nat -> Nat
   op qfact: Nat * Nat -> Nat
   op plus : Nat * Nat -> Nat
   op times : Nat * Nat -> Nat
   op minus : Nat * Nat -> Nat	
   op 4: Nat
   op xii: Nat	 
   pred __ < __: Nat * Nat
   forall x,y:Nat
     . exists a: Nat . s(canonical_element,x) = a
     . not (s(canonical_element,x) = zero)      %% remove this in GEN
      . fact(zero) = s(canonical_element,zero)  %% remove this in GEN
      . fact(s(canonical_element,x)) = times(s(canonical_element,x),fact(x))  %% remove this in GEN
      . qfact(s(canonical_element,x),y) = times(qfact(x,s(canonical_element,x)),y) %% remove this in GEN
      . qfact(zero,x) = x 
      . fact(x) = qfact(x,s(canonical_element,zero))    %implied
      . times(fact(x),y) = qfact(x,y)  %lemma required to prove this
      . plus(zero,x) = x
      . plus(s(canonical_element,x),y) = s(canonical_element,plus(x,y))
      . times(zero,y) = zero  %remove this in gen
      . times(s(canonical_element,x),y) = plus(y,times(x,y)) %remove this in gen
end

spec List = 
  sort El
  sort L
     op nil:L 
     op cons: El * L -> L
     op app: L * L -> L
     op rev: L -> L
     op qrev: L * L -> L
     forall x,y: L; h:El
       . app(nil,x) = x
       . app(cons(h,x),y) = cons(h,app(x,y))
       . rev(nil) = nil
       . rev(cons(h,x)) = app(rev(x),cons(h,nil))
       . qrev(nil,x) = x
       . qrev(cons(h,x),y) = qrev(x,cons(h,y))
       . rev(x) = qrev(x,nil)  %implied
end

spec SemSys = 
  sort PriorityDummySort
  op prioDummyOp : PriorityDummySort
end

spec Symbols = SemSys then 
 
 generated type Note ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | x | x1
 op __+__ : Note * Note -> Note
 op suc : Note -> Note 
 
 . suc(0) = 1 %(AxSucc0:p:100:r:0)%
 . suc(1) = 2 %(AxSucc1:p:100:r:0)%
 . suc(2) = 3 %(AxSucc2:p:100:r:0)%
 . suc(3) = 4 %(AxSucc3:p:100:r:0)%
 . suc(4) = 5 %(AxSucc4:p:100:r:0)%
 . suc(5) = 6 %(AxSucc5:p:100:r:0)%
 . suc(6) = 7 %(AxSucc6:p:100:r:0)%
 . suc(7) = 8 %(AxSucc7:p:100:r:0)%
 . suc(8) = 9 %(AxSucc8:p:100:r:0)%
 . suc(9) = x %(AxSucc9:p:100:r:0)%
 . suc(x) = x1 %(AxSucc10:p:100:r:0)%
 . suc(x1) = 0 %(AxSucc11:p:100:r:0)%

    . not 0 = 1
    . not 0 = 2
    . not 0 = 3 
    . not 0 = 4
    . not 0 = 5
    . not 0 = 6
    . not 0 = 7
    . not 0 = 8
    . not 0 = 9 
    . not 0 = x
    . not 0 = x1
 forall c, d: Note 
    . suc(c) = 0 <=> c = x1         %(AxSucc0-11:p:100:r:0)%
    . suc(c) = suc(d) <=> c = d     %(AxSuccEql:p:100:r:0)%
    . c + 0 = c                     %(AxSuccDontKnow:p:100:r:0)%
    . c + suc(d) = suc(c+d)         %(AxSuccAdd:p:100:r:0)%
end

spec Chord = Symbols then 
    sort Chord
    preds 
        hasAbsNote : Chord * Note
        hasRelNote : Chord * Note
     ops
        root: Chord -> Note                                 %(root_def)%

    %% There must be a root note which is played, i.e., an absolute note.
    forall c:Chord . exists n:Note
      . root(c) = n /\ hasAbsNote(c,n)  %(exOneRootThatMustBePlayed:p:-1)% 

    %% Relate absolute and relative notes
    forall c:Chord,n:Note    
       . hasRelNote(c,n) <=> hasAbsNote(c,(root(c)+n))         %(reltoabs_note:p:-1)%
    
    forall c: Chord . not (root(c) = 1 /\ hasAbsNote(c,7) /\ hasRelNote(c,7)) %(dis1:p:-1)%
    forall c: Chord . not (root(c) = 1 /\ hasAbsNote(c,2)) %(dis2:p:-1)%
    forall c: Chord . not (root(c) = 1 /\ hasAbsNote(c,4) /\ hasRelNote(c,4)) %(dis3:p:-1)%


    forall c: Chord
      . not (root(c) = 1 /\ hasAbsNote(c,7) /\ hasRelNote(c,6))
    %% Define forbidden dissonances
    forall n:Note, c:Chord
    %% Two notes that can be interpreted as major and minor 3rd
    . not (hasRelNote(c,3) /\ hasRelNote(c,4))  %(dis_minorMajorThird:p:-1)%
    %% Two notes that can be interpreted as perfect and diminished 5th
    . not (hasRelNote(c,7) /\ hasRelNote(c,6))  %(dis_perfectDimFifth:p:-1)%
    %% One haftone away from the root is often quite dissonant
    . not hasRelNote(c,1)                       %(dis_second:p:-1)%
    %% A minor 7th (rel 10) with a major 6th (rel 9) is pretty dissonant
    . not (hasRelNote(c,x) /\ hasRelNote(c,9)) %(dis_seventhsixth:p:-1)%
end


spec PerfCadence =  Chord then
   sort Perf
   op p:Perf	  
   op croot: Perf -> Note
   op pre:Perf * Note -> Chord
   op pre: Perf -> Chord
   op rootpre:Perf -> Note
   op post:Perf * Note -> Chord
   op post: Perf -> Chord	 
   op rootpost:Perf -> Note
   forall n:Note 
   . hasRelNote(pre(p,n),0)  %(Ax-relb0:p:2)% 
   . hasRelNote(pre(p,n),4)  %(Ax-relb3:p:1)%
   . hasRelNote(pre(p,n),7)  %(Ax-relbb7:p:0)% 
   . hasRelNote(pre(p,n),x)  %(Ax-relbb7:p:0)% 
   . hasRelNote(post(p,n),0)  %(Ax-relb0:p:2)% 
   . hasRelNote(post(p,n),4)  %(Ax-relb3:p:1)%
   . hasRelNote(post(p,n),7)  %(Ax-relbb7:p:0)% 
   . hasRelNote(post(p,n),x1)  %(Ax-relbb7:p:0)% 
   . rootpre(p) = croot(p) + 7
   . rootpost(p) = croot(p)
   . (pre(p,n) = pre(p)) <=> (croot(p) = n)
   . (post(p,n) = post(p)) <=> (croot(p) = n)   
end

spec ListNote = List with El |-> Note, L |-> LN
spec ListChord = List with El |-> Chord, L |-> LC

spec Progression = 
  PerfCadence then 
  ListNote then
  ListChord then	   
  op c1,c2:Chord
  op p: Perf
  op lin:LN
  op lout:LC 
  op calc_prog: LN -> LC
  . calc_prog(nil) = nil
  forall h:Note, t:LN. calc_prog(cons(h,t)) = cons(pre(p,h),cons(post(p,h),calc_prog(t)))
  . lout = calc_prog(lin)
end

spec CyclicGroup =  NatSuc then
 sort G < Nat
 then List with El |-> G, L |-> ListG
 then
 op subseq: ListG
 op binop: G * G -> G
 op ident: G
 op inv: G -> G
 pred gen: G
 op order: Nat
 op calc_subseq: G -> ListG
 op calc_subseq_r: G * G -> ListG    
 forall x,y,z:G
 . binop(x,binop(y,z)) = binop(binop(x,y),z) %assoc
 . binop(x,ident) = x
 . binop(x,inv(x)) = ident
 . (order<plus(x,y)) => binop(x,y) = minus(plus(x,y),order)
 . (x = y) => calc_subseq_r(x,y) = nil
 . (not (x = y)) => calc_subseq_r(x,y) = cons(binop(x,y),(calc_subseq_r(x,binop(x,y))))
 . calc_subseq(x) = calc_subseq_r(x,x) 
end

spec Cyc12 = CyclicGroup then
 op gen: G
 . gen = 4 as G
 . order = xii as G   
 . subseq = calc_subseq(gen)
end

spec Gen =  
   sort H
   then ListNote then
   op l: LN
end


view I1 : Gen to Progression =
   H |-> Chord,
   l |-> lin

view I2 : Gen to Cyc12 =
   H |-> G,
   l |-> subseq

spec Blend = combine I1,I2