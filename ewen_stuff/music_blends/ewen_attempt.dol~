logic OWL

%% What means what:
%% - General: these examples consider only two chord cadences, with a pre-final
%% and a final chord
%% - PF_: refers to the pre-final chord
%% - F_ : refers to the final chord
%% - R_ : refers to the root of a chord
%% - B_ : refers to the bass of a chord
%% - unison, P5, etc.: relations between notes
%%
%% Examples:
%% - ObjectProperty: PF_BR_unison: the bass and the root of the pre-final
%% chord are unisons.
%% - ObjectProperty: REL_PFRoot_FRoot: the pre-final and final chord roots have
%% some generic relation (could be unison, P5, m2 or whatever...)


%% define ontology perf7cadXTRM ========================
ontology perf7cadXTRM =
	
	Class: Cadence
	
	Class: ChordQuality
	Class: dom7Chord
		SubClassOf: ChordQuality
	Class: majorChord
		SubClassOf: ChordQuality
		
	Class: NoteRelations
	Class: P5
		SubClassOf: NoteRelations
	Class: Unison
		SubClassOf: NoteRelations
    

        Class

    ObjectProperty: hasPFChordQuality
		Domain: Cadence
		Range: ChordQuality
	ObjectProperty: hasFChordQuality
		Domain: Cadence
		Range: ChordQuality
		
	ObjectProperty: hasRootsRel
		Domain: Cadence
		Range: NoteRelations
	ObjectProperty: hasBassesRel
		Domain: Cadence
		Range: NoteRelations
	ObjectProperty: hasPFRootBassRel
		Domain: Cadence
		Range: NoteRelations
	ObjectProperty: hasFRootBassRel
		Domain: Cadence
		Range: NoteRelations
    
    Class: perf7cad
		SubClassOf: Cadence
        that hasPFChordQuality some dom7Chord
        and hasFChordQuality some majorChord
        and hasRootsRel some P5
        and hasBassesRel some P5
		and hasPFRootBassRel some Unison
		and hasFRootBassRel some Unison
        
end

%% define ontology phrygcadXTRM ========================
ontology phrygcadXTRM =
	
	Class: Cadence
    
    Class: ChordQuality
	Class: minorChord
		SubClassOf: ChordQuality
	Class: fifthChord
		SubClassOf: ChordQuality
		
	Class: NoteRelations
	Class: m7
		SubClassOf: NoteRelations
	Class: m2
		SubClassOf: NoteRelations
	Class: M6
		SubClassOf: NoteRelations
	Class: Unison
		SubClassOf: NoteRelations
    
    ObjectProperty: hasPFChordQuality
		Domain: Cadence
		Range: ChordQuality
	ObjectProperty: hasFChordQuality
		Domain: Cadence
		Range: ChordQuality
		
	ObjectProperty: hasRootsRel
		Domain: Cadence
		Range: NoteRelations
	ObjectProperty: hasBassesRel
		Domain: Cadence
		Range: NoteRelations
	ObjectProperty: hasPFRootBassRel
		Domain: Cadence
		Range: NoteRelations
	ObjectProperty: hasFRootBassRel
		Domain: Cadence
		Range: NoteRelations
		
	Class: phrygCad
		SubClassOf: Cadence
			that hasPFChordQuality some minorChord
			and hasFChordQuality some fifthChord
			and hasRootsRel some m7
			and hasBassesRel some m2
			and hasPFRootBassRel some M6
			and hasFRootBassRel some Unison
	
end

%% define ontology genericXTRM =============================
ontology genericXTRM =
	
	Class: Cadence
    
    Class: ChordQuality
		
	Class: NoteRelations
    
    ObjectProperty: hasPFChordQuality
		Domain: Cadence
		Range: ChordQuality
	ObjectProperty: hasFChordQuality
		Domain: Cadence
		Range: ChordQuality
		
	ObjectProperty: hasRootsRel
		Domain: Cadence
		Range: NoteRelations
	ObjectProperty: hasBassesRel
		Domain: Cadence
		Range: NoteRelations
	ObjectProperty: hasPFRootBassRel
		Domain: Cadence
		Range: NoteRelations
	ObjectProperty: hasFRootBassRel
		Domain: Cadence
		Range: NoteRelations
		
	Class: genericCad
		SubClassOf: Cadence
        	that hasPFChordQuality some ChordQuality
			and hasFChordQuality some ChordQuality
			and hasRootsRel some NoteRelations
			and hasBassesRel some NoteRelations
			and hasPFRootBassRel some NoteRelations
			and hasFRootBassRel some NoteRelations
end

%% define interpretations ==============================

interpretation I1 : genericXTRM to perf7cadXTRM = 
	genericCad |-> perf7cad,
	ChordQuality |-> ChordQuality,
	NoteRelations |-> NoteRelations,
	hasRootsRel |-> hasRootsRel,
	hasBassesRel |-> hasBassesRel,
	hasPFRootBassRel |-> hasPFRootBassRel,
	hasFRootBassRel |-> hasFRootBassRel
	
interpretation I2 : genericXTRM to phrygcadXTRM = 
	genericCad |-> phrygCad,
	ChordQuality |-> ChordQuality,
	NoteRelations |-> NoteRelations,
	hasRootsRel |-> hasRootsRel,
	hasBassesRel |-> hasBassesRel,
	hasPFRootBassRel |-> hasPFRootBassRel,
	hasFRootBassRel |-> hasFRootBassRel

%% do blending =========================================
 ontology Colimit = 
	combine I1, I2