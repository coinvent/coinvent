spec Symbols = 
 
 generated type Note ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | x | x1
 generated type Modifier ::= major | minor | diminished | perfect | augmented
 %% op __+__ : Note * Note -> Note
 op suc : Note -> Note 
 
 . suc(0) = 1 %(AxSucc0:p:100:r:0)%
 . suc(1) = 2 %(AxSucc1:p:100:r:0)%
 . suc(2) = 3 %(AxSucc2:p:100:r:0)%
 . suc(3) = 4 %(AxSucc3:p:100:r:0)%
 . suc(4) = 5 %(AxSucc4:p:100:r:0)%
 . suc(5) = 6 %(AxSucc5:p:100:r:0)%
 . suc(6) = 7 %(AxSucc6:p:100:r:0)%
 . suc(7) = 8 %(AxSucc7:p:100:r:0)%
 . suc(8) = 9 %(AxSucc8:p:100:r:0)%
 . suc(9) = x %(AxSucc9:p:100:r:0)%
 . suc(x) = x1 %(AxSucc10:p:100:r:0)%
 . suc(x1) = 0 %(AxSucc11:p:100:r:0)%

  . not major = minor
  . not major = diminished 
  . not major = perfect
  . not major = augmented
  . not minor = diminished
  . not minor = perfect
  . not minor = augmented
  . not diminished = perfect
  . not diminished = augmented
  . not perfect = augmented

    . not 0 = 1
    . not 0 = 2
    . not 0 = 3 
    . not 0 = 4
    . not 0 = 5
    . not 0 = 6
    . not 0 = 7
    . not 0 = 8
    . not 0 = 9 
    . not 0 = x
    . not 0 = x1

 forall c, d: Note 
 %%    . suc(c) = 0 => c = x1 %(AxSucc0-11:p:100:r:0)%
    . suc(c) = suc(d) <=> c = d %(AxSuccEql:p:100:r:0)%
    %% . c + 0 = x %(AxSuccDontKnow:p:100:r:0)%
    %% . c + suc(d) = suc(c+d)  %(AxSuccAdd:p:100:r:0)%
end

spec RelChord = 
Symbols then
%% primary sort for RelChord 
    sort RelChord 

%% %% a chord can be defined via relative positions from the root 
%%     preds    
%%         hasRelNote : RelChord * Note
    ops
%% thirdrel is a partial function defining the third (minor, major)
%% bassrel determine which note is in the bass - this must be in the chord
%% this guarantees one note at least
        thirdrel: RelChord ->? Modifier                   %(thirdrel_def:p:100:r:0)%  
        bassrel: RelChord -> Note                         %(bassrel_def:p:100:r:0)%
%% other potential interesting functions?
        seventhrel:RelChord ->? Modifier                 %(seventhrel_def:p:100:r:0)%
        sixthrel:RelChord ->? Modifier                    %(sixthrel_def:p:100:r:0)%
        fifthrel: RelChord ->? Modifier                   %(fifthrel_def:p:100:r:0)%

%% %% these are definitions for what each modifier means in terms of notes
%% %% e.g. a perfect fifth is a note interval of 7 (semitones)
%%  forall c:RelChord,n:Note
%%        . bassrel(c)=n => hasRelNote(c,n)                %(bassrel:p:100:r:0)%  
%%        . thirdrel(c) = minor => hasRelNote(c,3)         %(minor3rel:p:100:r:0)%
%%        . thirdrel(c) = major => hasRelNote(c,4)         %(major3rel:p:100:r:0)%
%%        . seventhrel(c) = minor => hasRelNote(c,x)       %(minor7rel:p:100:r:0)%
%%        . seventhrel(c) = major => hasRelNote(c,x1)      %(major7rel:p:100:r:0)%
%%        . sixthrel(c) = minor => hasRelNote(c,8)         %(minor6rel:p:100:r:0)%
%%        . sixthrel(c) = major => hasRelNote(c,9)         %(major6rel:p:100:r:0)%
%%        . fifthrel(c) = perfect => hasRelNote(c,7)       %(perfect5rel:p:100:r:0)%
%%        . fifthrel(c) = diminished => hasRelNote(c,6)    %(dimin5rel:p:100:r:0)%
%%        . fifthrel(c) = augmented => hasRelNote(c,8)     %(augment5rel:p:100:r:0)%
end

spec AbsChord = 
RelChord then 
%% primary sort for RelChord 
     sort AbsChord < RelChord

     %% preds
     %%    hasAbsNote: AbsChord * Note                       
     ops
%% here absolute note positions are defined for specific chords
        root: AbsChord -> Note                                 %(root_def:p:100:r:0)%
%% this axiom relate relative to absolute note positions
    %% forall c:AbsChord,n:Note    
    %%    . hasRelNote(c,n) <=> hasAbsNote(c,(root(c)+n))         %(reltoabs_note:p:100:r:0)%
end

%%% CADENCE
%% this is simply two chords, and relation between them
%% rootRel means the relation between the first and second
%% e.g. rootRel(G major,C major) = 7
spec Cadence = 
  RelChord then
  ops prefinal: RelChord
      final: RelChord
      rootRel: RelChord * RelChord -> Note
end

%%% PERFECT CADENCE
%% This is the specification of a perfect Cadence
spec PerfectCadence = 
  Cadence then 
    . rootRel(prefinal,final) = 7       %(PerfectRootRel:p:1:r:1)%        %%Low importance
    %% . hasRelNote(prefinal,0)            %(PerfectPrefinalRelNote0:p:2:r:1)%
    %% . hasRelNote(final,0)               %(PerfectFinalRelNote0:p:2:r:1)%
    . fifthrel(final) = perfect         %(PerfectFifthFinal:p:2:r:1)%
    . fifthrel(prefinal) = perfect      %(PerfectFifthPrefinal:p:2:r:1)%
    . seventhrel(prefinal) = minor      %(PerfectSeventhPrefinal:p:2:r:1)%
    . thirdrel(prefinal) = major        %(PerfectthirdPrefinal:p:3:r:1)%  %% High importance
end 

%% WEAKENED PERFECT CADENCE
%% here is a weaekend version
spec GenPerfectCadence = 
  Cadence then
    %% . hasRelNote(prefinal,0)
    %% . hasRelNote(final,0)
    . fifthrel(final) = perfect
    . fifthrel(prefinal) = perfect
    . seventhrel(prefinal) = minor
    . thirdrel(prefinal) = major
end 

%%% PHRYGIAN CADENCE
spec PhrygianCadence = 
  Cadence then
    . rootRel(prefinal,final) = x   %(PhryRootRel:p:3:r:1)% %%of high importance
    %% . hasRelNote(prefinal,0)        %(PhryPrefinalRelNote0:p:2:r:1)%
    %% . hasRelNote(final,0)           %(PhryFinalRelNote0:p:2:r:1)%
    . fifthrel(final) = perfect     %(PhryFifthFinal:p:2:r:1)%
    . fifthrel(prefinal) = perfect  %(PhryFifthPrefinal:p:2:r:1)%
    . thirdrel(prefinal) = minor    %(PhryThirdRel:p:1:r:1)% %% of low importance
end

%% weakened version 
spec GenPhrygianCadence = 
  Cadence then
    . rootRel(prefinal,final) = x
    %% . hasRelNote(prefinal,0)
    %% . hasRelNote(final,0)
    . fifthrel(final) = perfect
    . fifthrel(prefinal) = perfect
end

%%% ABS_CADENCE
%% an absolute cadence is a cadence which is made absolute by fixing the root
%% the root of the prefinal can be calculated from the the rootRel function
spec AbsCadence = 
  Cadence then
  AbsChord then
  op finalroot: Note
  .  root(final as AbsChord) = finalroot   %(AxAbsFinalRoot:r:0:p:100)%
  %% .  root(prefinal as AbsChord) = finalroot + rootRel(prefinal,final) %(AxAbsPrefinalRoot:r:0:p:100)%
end

%% a C perfect cadence is a perfect cadence
%% inheriting also an absolute cadence
%% which is has final root fixed at 0
spec CPerfectCadence = 
   AbsCadence then
   PerfectCadence then
   . root(final as AbsChord) = 0 %(PerfectFixRoot:r:1:p:3)%
end

%%% weakened version
spec GenCPerfectCadence = 
   AbsCadence then
   GenPerfectCadence then
   . root(final as AbsChord) = 0
end

%% Phrygian cadence with final root fixed at 0
spec CPhrygianCadence = 
    AbsCadence then
    PhrygianCadence then
    . root(final as AbsChord) = 0 %(PhrygianFixRoot:r:1:p:3)%
end

%% weakened version
spec GenCPhrygianCadence = 
    AbsCadence then
    GenPhrygianCadence then
    . root(final as AbsChord) = 0
end

%% here is that which is common to both cadences
%% this consitutes a generic space for the cadence blend
%% the cadence means all specs have two chords
spec GenericCadence = 
  AbsCadence then
  . root(final as AbsChord) = 0
  %% . hasRelNote(final,0)
  %% . hasRelNote(prefinal,0)
  . fifthrel(final) = perfect
  . fifthrel(prefinal) = perfect
end

interpretation I1: GenericCadence to CPerfectCadence
interpretation I2: GenericCadence to CPhrygianCadence

interpretation I3: GenericCadence to GenCPerfectCadence
interpretation I4: GenericCadence to GenCPhrygianCadence

spec inconsistent_blend = combine I1,I2
spec generalised_blend = combine I3,I4

spec BackgroundKnowledge = AbsCadence then 
  %% generated type Note ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | x | x1
  preds
        hasAbsNote: AbsChord * Note                       
        hasRelNote : RelChord * Note
  ops
      __+__ : Note * Note -> Note
      root: AbsChord -> Note                              
        thirdrel: RelChord ->? Modifier                   %(thirdrel_def:p:100:r:0)%  
        bassrel: RelChord -> Note                         %(bassrel_def:p:100:r:0)%
        seventhrel:RelChord ->? Modifier                 %(seventhrel_def:p:100:r:0)%
        sixthrel:RelChord ->? Modifier                    %(sixthrel_def:p:100:r:0)%
        fifthrel: RelChord ->? Modifier                   %(fifthrel_def:p:100:r:0)%
        suc : Note -> Note 
 
 %% . suc(0) = 1 %(AxSucc0:p:100:r:0)%
 %% . suc(1) = 2 %(AxSucc1:p:100:r:0)%
 %% . suc(2) = 3 %(AxSucc2:p:100:r:0)%
 %% . suc(3) = 4 %(AxSucc3:p:100:r:0)%
 %% . suc(4) = 5 %(AxSucc4:p:100:r:0)%
 %% . suc(5) = 6 %(AxSucc5:p:100:r:0)%
 %% . suc(6) = 7 %(AxSucc6:p:100:r:0)%
 %% . suc(7) = 8 %(AxSucc7:p:100:r:0)%
 %% . suc(8) = 9 %(AxSucc8:p:100:r:0)%
 %% . suc(9) = x %(AxSucc9:p:100:r:0)%
 %% . suc(x) = x1 %(AxSucc10:p:100:r:0)%
 %% . suc(x1) = 0 %(AxSucc11:p:100:r:0)%

 forall c, d: Note 
    . suc(c) = 0 => c = x1 %(AxSucc0-11:p:100:r:0)%
    %% . suc(c) = suc(d) <=> c = d %(AxSuccEql:p:100:r:0)%
    . c + 0 = x %(AxSuccDontKnow:p:100:r:0)%
    . c + suc(d) = suc(c+d)  %(AxSuccAdd:p:100:r:0)%


%% %% these are definitions for what each modifier means in terms of notes
%% %% e.g. a perfect fifth is a note interval of 7 (semitones)
 forall c:RelChord,n:Note
       . bassrel(c)=n => hasRelNote(c,n)                %(bassrel:p:100:r:0)%  
       . thirdrel(c) = minor => hasRelNote(c,3)         %(minor3rel:p:100:r:0)%
       . thirdrel(c) = major => hasRelNote(c,4)         %(major3rel:p:100:r:0)%
       . seventhrel(c) = minor => hasRelNote(c,x)       %(minor7rel:p:100:r:0)%
       . seventhrel(c) = major => hasRelNote(c,x1)      %(major7rel:p:100:r:0)%
       . sixthrel(c) = minor => hasRelNote(c,8)         %(minor6rel:p:100:r:0)%
       . sixthrel(c) = major => hasRelNote(c,9)         %(major6rel:p:100:r:0)%
       . fifthrel(c) = perfect => hasRelNote(c,7)       %(perfect5rel:p:100:r:0)%
       . fifthrel(c) = diminished => hasRelNote(c,6)    %(dimin5rel:p:100:r:0)%
       . fifthrel(c) = augmented => hasRelNote(c,8)     %(augment5rel:p:100:r:0)%


  forall c:AbsChord,n:Note    
    %% . hasRelNote(c,n) <=> hasAbsNote(c,(root(c)+n))         %(reltoabs_note:p:100:r:0)%

  . hasRelNote(final,0)
  . hasRelNote(prefinal,0)  
  . root(prefinal as AbsChord) = finalroot + rootRel(prefinal,final) %(AxAbsPrefinalRoot:r:0:p:100)%

end

spec ElaboratedBlend = generalised_blend and BackgroundKnowledge end