%% This gives 24 stable models with 0 non-optimal steps

spec SemSys = 
  sort PriorityDummySort
  op prioDummyOp : PriorityDummySort
end

spec Symbols = SemSys then 
 
 generated type Note ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | x | x1
 op __+__ : Note * Note -> Note
 op suc : Note -> Note 
 
 . suc(0) = 1 %(AxSucc0:p:100:r:0)%
 . suc(1) = 2 %(AxSucc1:p:100:r:0)%
 . suc(2) = 3 %(AxSucc2:p:100:r:0)%
 . suc(3) = 4 %(AxSucc3:p:100:r:0)%
 . suc(4) = 5 %(AxSucc4:p:100:r:0)%
 . suc(5) = 6 %(AxSucc5:p:100:r:0)%
 . suc(6) = 7 %(AxSucc6:p:100:r:0)%
 . suc(7) = 8 %(AxSucc7:p:100:r:0)%
 . suc(8) = 9 %(AxSucc8:p:100:r:0)%
 . suc(9) = x %(AxSucc9:p:100:r:0)%
 . suc(x) = x1 %(AxSucc10:p:100:r:0)%
 . suc(x1) = 0 %(AxSucc11:p:100:r:0)%

    . not 0 = 1
    . not 0 = 2
    . not 0 = 3 
    . not 0 = 4
    . not 0 = 5
    . not 0 = 6
    . not 0 = 7
    . not 0 = 8
    . not 0 = 9 
    . not 0 = x
    . not 0 = x1
 forall c, d: Note 
    . suc(c) = 0 <=> c = x1         %(AxSucc0-11:p:100:r:0)%
    . suc(c) = suc(d) <=> c = d     %(AxSuccEql:p:100:r:0)%
    . c + 0 = c                     %(AxSuccDontKnow:p:100:r:0)%
    . c + suc(d) = suc(c+d)         %(AxSuccAdd:p:100:r:0)%
end

spec Chord = Symbols then 
    sort Chord
    preds 
        hasAbsNote : Chord * Note
        hasRelNote : Chord * Note
     ops
        root: Chord -> Note                                 %(root_def)%

    %% There must be a root note which is played, i.e., an absolute note.
    forall c:Chord . exists n:Note
      . root(c) = n /\ hasAbsNote(c,n)  %(exOneRootThatMustBePlayed:p:-1)% 

    %% Relate absolute and relative notes
    forall c:Chord,n:Note    
       . hasRelNote(c,n) <=> hasAbsNote(c,(root(c)+n))         %(reltoabs_note:p:-1)%
    
    forall c: Chord . not (root(c) = 1 /\ hasAbsNote(c,7) /\ hasRelNote(c,7)) %(dis1:p:-1)%
    forall c: Chord . not (root(c) = 1 /\ hasAbsNote(c,2)) %(dis2:p:-1)%
    forall c: Chord . not (root(c) = 1 /\ hasAbsNote(c,4) /\ hasRelNote(c,4)) %(dis3:p:-1)%


    forall c: Chord
      . not (root(c) = 1 /\ hasAbsNote(c,7) /\ hasRelNote(c,6))
    %% Define forbidden dissonances
    forall n:Note, c:Chord
    %% Two notes that can be interpreted as major and minor 3rd
    . not (hasRelNote(c,3) /\ hasRelNote(c,4))  %(dis_minorMajorThird:p:-1)%
    %% Two notes that can be interpreted as perfect and diminished 5th
    . not (hasRelNote(c,7) /\ hasRelNote(c,6))  %(dis_perfectDimFifth:p:-1)%
    %% One haftone away from the root is often quite dissonant
    . not hasRelNote(c,1)                       %(dis_second:p:-1)%
    %% A minor 7th (rel 10) with a major 6th (rel 9) is pretty dissonant
    . not (hasRelNote(c,x) /\ hasRelNote(c,9)) %(dis_seventhsixth:p:-1)%
end

spec G7 = 
%% G, B, D, F
  Chord then
  op c:Chord

  . hasAbsNote(c,7)  %(Ax-absg7:p:1)%   %%remove 
  . hasAbsNote(c,x1) %(Ax-absg11:p:3)%  %%remove
  . hasAbsNote(c,2)  %(Ax-absg2:p:1)%   
  . hasAbsNote(c,5)  %(Ax-absg5:p:2)%  
  . root(c) = 7      %(Ax-rootg7:p:1)%  
  . hasRelNote(c,0)  %(Ax-relg0:p:3)%   
  . hasRelNote(c,4)  %(Ax-relg4:p:3)%   
  . hasRelNote(c,7)  %(Ax-relg7:p:0)%   
  . hasRelNote(c,x)  %(Ax-relg10:p:2)% 
end

spec Bbmin = 
%% Bb, C#/Db, F
  Chord then
  op c:Chord
  
  . hasAbsNote(c,x)  %(Ax-absb10:p:1)%
  . hasAbsNote(c,1)  %(Ax-absb1:p:3)% %%remove
  . hasAbsNote(c,5)  %(Ax-absb5:p:2)%  
  . root(c) = x     %(Ax-rootb10:p:2)%
  . hasRelNote(c,0)  %(Ax-relb0:p:2)% 
  . hasRelNote(c,3)  %(Ax-relb3:p:1)% %%remove
  . hasRelNote(c,7)  %(Ax-relbb7:p:0)% 
        
end

spec C = 
  Chord then
  op c:Chord

  %% . hasAbsNote(c,0)  %(Ax-absc0:p:3)% %priority(3)%  %%remove 
  %% . hasAbsNote(c,4)  %(Ax-absc4:p:2)% %priority(2)%  %%remove
  %% . hasAbsNote(c,7)  %(Ax-absc7:p:1)% %priority(1)%  
  . root(c) = 0      %(Ax-rootc0:p:1)% %priority(1)%  
  %% . hasRelNote(c,0)  %(Ax-relc0:p:3)% %priority(3)%  
  %% . hasRelNote(c,4)  %(Ax-relc4:p:3)% %priority(3)%  
  %% . hasRelNote(c,7)  %(Ax-relc7:p:3)% %priority(3)%  
end

spec Progression = Chord then 
    preds 
        isTerminalChord : Chord
        isInitialChord : Chord
        hasSucc : Chord * Chord   

    . exists! c : Chord . isTerminalChord(c) %% There must be one terminal chord
    . exists! c : Chord . isInitialChord(c)  %% There must be one initial chord
    . forall cPre : Chord . ( exists! cSucc : Chord . hasSucc(cPre,cSucc))  \/ isTerminalChord(cPre) %% A chord must either be a terminal chord or have exactly one hasSuccessor
    . forall cSucc : Chord . ( exists! cPre : Chord . hasSucc(cPre,cSucc))  \/ isInitialChord(cSucc) %% A chord must either be an initial chord or have exactly one predecessor
end

spec PerfectCadence = Progression then 
    G7 with c |-> c1Perfect then
    C with c |-> c2Perfect then 
    
    . hasSucc(c1Perfect,c2Perfect)  %(succPerfect:p:30)%
    . isInitialChord(c1Perfect)     %(initialChordPerfect:p:30)%
    . isTerminalChord(c2Perfect)    %(terminalChordPerfect:p:30)%
    . prioDummyOp = prioDummyOp %(c1Perfect:p:-1--c2Perfect:p:-1)%
end

spec PhrygianCadence = Progression then 
    Bbmin with c |-> c1Phrygian then
    C with c |-> c2Phrygian then 
    
    . hasSucc(c1Phrygian,c2Phrygian)  %(succPhrygian:p:30)%
    . isInitialChord(c1Phrygian)      %(initialPhrygian:p:30)%
    . isTerminalChord(c2Phrygian)     %(terminalPhrygian:p:30)%
    . prioDummyOp = prioDummyOp %(c1Perfect:p:-1--c2Perfect:p:-1)%
end

%% The generic space for the fusion is a progression with two successive chords, where the first one is undefined
spec GenericFusion = Progression then     
    C with c |-> c2Generic then 

    ops 
    c1Generic : Chord
    
    %% Here may be some more axioms for common notes in fist chords.
    
    . hasSucc(c1Generic,c2Generic)
    . isInitialChord(c1Generic)
    . isTerminalChord(c2Generic)
end

view GenericFusionToPhrygian : GenericFusion to PhrygianCadence =  c1Generic |-> c1Phrygian, c2Generic |-> c2Phrygian end 
view GenericFusionToPerfect : GenericFusion to PerfectCadence =  c1Generic |-> c1Perfect, c2Generic |-> c2Perfect end 

%% The backdoor cadence is a possible blend. 
spec BlendFusion = Progression then 
    C with c |-> c2Blend then 
    ops 
    c1Blend: Chord

    . hasAbsNote(c1Blend,x)
    . hasAbsNote(c1Blend,2)
    . hasAbsNote(c1Blend,5) 
    . hasAbsNote(c1Blend,8) 
    . root(c1Blend) = x
    . hasRelNote(c1Blend,0)
    . hasRelNote(c1Blend,4)
    . hasRelNote(c1Blend,7) 
    . hasRelNote(c1Blend,x)

    . isInitialChord(c1Blend)
    . isTerminalChord(c2Blend)
    . hasSucc(c1Blend,c2Blend) 
end


spec GenericCrossfade = Progression then 
    ops 
        cMiddle : Chord
end

%% How to get to the GenericCrossfade from PerfectCadence (the 2nd cadence in the tierce de picardie):
%% remove all axioms that define c2
%% remove c2
%% remove axioms that would create an inconsistency when blending the G7 and C chords. 

%% How to get to the GenericCrossfade from PhrygianCadence (the 1st cadence in the tierce de picardie):
%% remove all axioms that define c1
%% remove c1
%% remove axioms that would create an inconsistency when blending the G7 and C chords. 

view GenericCrossfadeToPerfect : GenericCrossfade to PerfectCadence = cMiddle |-> c2Perfect end 
view GenericCrossfadeToPhrygian : GenericCrossfade to PhrygianCadence = cMiddle |-> c1Phrygian end 

%% The generalised Phrygian is obtained by 
%% 1. Remove axiom that states that c2 is terminal 
%% 2. Remove axoims about relative and absolute notes that cause inconsistencies. 
%% The generalised Perfect is obtained by 
%% 1. Remove axiom that states that c1 is initial
%% 2. Remove axioms about relative and absolute notes that cause inconsistencies. 

spec BlendCrossfade = Progression then 
    Bbmin with c |-> c1Blend then 
    C with c |-> c3Blend then 
    ops 
    cMiddle : Chord

    . hasAbsNote(cMiddle,0)
    . hasAbsNote(cMiddle,4)
    . hasAbsNote(cMiddle,7) 
    . hasAbsNote(cMiddle,x) 
    . root(cMiddle) = 0
    . hasRelNote(cMiddle,0)
    . hasRelNote(cMiddle,4)
    . hasRelNote(cMiddle,7) 
    . hasRelNote(cMiddle,x)


    . hasSucc(c1Blend,cMiddle) %% This comes from Phrygian Cadence specification
    . hasSucc(cMiddle,c3Blend) %% This comes from Perfect Cadence specification
    . isInitialChord(c1Blend)  %% This comes from Phrygian Cadence specification
    . isTerminalChord(c3Blend) %% This comes from Perfect Cadence specification
end





