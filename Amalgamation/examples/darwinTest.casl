spec Inconsistent = 
  free type SomeType ::= 0 | 1

  . 0 = 1
end

spec Consistent = 
  free type SomeType ::= 0 | 1
  %% . 0 = 1
end

spec Symbols = 
 
 generated type Note ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | x | x1
 generated type Modifier ::= major | minor | diminished | perfect | augmented
 %% op __+__ : Note * Note -> Note
 op suc : Note -> Note 
 
 . suc(0) = 1 %(AxSucc0:p:100:r:0)%
 . suc(1) = 2 %(AxSucc1:p:100:r:0)%
 . suc(2) = 3 %(AxSucc2:p:100:r:0)%
 . suc(3) = 4 %(AxSucc3:p:100:r:0)%
 . suc(4) = 5 %(AxSucc4:p:100:r:0)%
 . suc(5) = 6 %(AxSucc5:p:100:r:0)%
 . suc(6) = 7 %(AxSucc6:p:100:r:0)%
 . suc(7) = 8 %(AxSucc7:p:100:r:0)%
 . suc(8) = 9 %(AxSucc8:p:100:r:0)%
 . suc(9) = x %(AxSucc9:p:100:r:0)%
 . suc(x) = x1 %(AxSucc10:p:100:r:0)%
 . suc(x1) = 0 %(AxSucc11:p:100:r:0)%

  . not major = minor
  . not major = diminished 
  . not major = perfect
  . not major = augmented
  . not minor = diminished
  . not minor = perfect
  . not minor = augmented
  . not diminished = perfect
  . not diminished = augmented
  . not perfect = augmented

    . not 0 = 1
    . not 0 = 2
    . not 0 = 3 
    . not 0 = 4
    . not 0 = 5
    . not 0 = 6
    . not 0 = 7
    . not 0 = 8
    . not 0 = 9 
    . not 0 = x
    . not 0 = x1
 %% forall c, d: Note 
 %%    . suc(c) = 0 => c = x1 %(AxSucc0-11:p:100:r:0)%
 %%    . suc(c) = suc (d) => c = d %(AxSuccEql:p:100:r:0)%
 %%    . c + 0 = x %(AxSuccDontKnow:p:100:r:0)%
 %%    . c + suc(d) = suc(c+d)  %(AxSuccAdd:p:100:r:0)%
end

spec Test = Symbols then 
    sorts RelChord
 
 ops
%% thirdrel is a partial function defining the third (minor, major)
%% bassrel determine which note is in the bass - this must be in the chord
%% this guarantees one note at least
        thirdrel: RelChord ->? Modifier                   %(thirdrel_def:p:100:r:0)%  
%%         bassrel: RelChord -> Note                         %(bassrel_def:p:100:r:0)%
%% %% other potential interesting functions?
%%         seventhrel:RelChord ->? Modifier                 %(seventhrel_def:p:100:r:0)%
%%         sixthrel:RelChord ->? Modifier                    %(sixthrel_def:p:100:r:0)%
%%         fifthrel: RelChord ->? Modifier                   %(fifthrel_def:p:100:r:0)%

        final : RelChord

    .thirdrel(final) = minor
    .thirdrel(final) = major
end

spec Test2 =
sorts Note

ops
  1 : Note
  2 : Note

  . 1 = 2

end

