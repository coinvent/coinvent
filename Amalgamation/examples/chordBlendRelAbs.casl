spec Symbols = 
%%  Note can be interpreted as an absolute note
%%  Or an interval
    free type Note ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | x | x1
%% can describe interals in the following way
    free type Modifier ::= major | minor | diminished | perfect | augmented
%% these operators act on intervals
%% e.g. a fifth + a fifth = a ninth
%% start at a C, go up a fith, you get to G
%% go up a fifth from G, you get to D
%% so an interval which is 7, plus another, you get 2
    ops __ + __: Note * Note -> Note
        __ - __: Note * Note -> Note
%%% this gives a calculus for how to add intervals
    . 0 + 0 = 0
    . 0 + 1 = 1
    . 0 + 2 = 2
    . 0 + 3 = 3
    . 0 + 4 = 4
    . 0 + 5 = 5
    . 0 + 6 = 6
    . 0 + 7 = 7
    . 0 + 8 = 8
    . 0 + 9 = 9
    . 0 + x = x
    . 0 + x1 = x1
    . 1 + 0 = 1
    . 1 + 1 = 2
    . 1 + 2 = 3
    . 1 + 3 = 4
    . 1 + 4 = 5
    . 1 + 5 = 6
    . 1 + 6 = 7
    . 1 + 7 = 8
    . 1 + 8 = 9
    . 1 + 9 = x
    . 1 + x = x1
    . 1 + x1 = 0
    . 2 + 0 = 2
    . 2 + 1 = 3
    . 2 + 2 = 4
    . 2 + 3 = 5
    . 2 + 4 = 6
    . 2 + 5 = 7
    . 2 + 6 = 8
    . 2 + 7 = 9
    . 2 + 8 = x
    . 2 + 9 = x1
    . 2 + x = 0
    . 2 + x1 = 1
    . 3 + 0 = 3
    . 3 + 1 = 4
    . 3 + 2 = 5
    . 3 + 3 = 6
    . 3 + 4 = 7
    . 3 + 5 = 8
    . 3 + 6 = 9
    . 3 + 7 = x
    . 3 + 8 = x1
    . 3 + 9 = 0
    . 3 + x = 1
    . 3 + x1 = 2
    . 4 + 0 = 4
    . 4 + 1 = 5
    . 4 + 2 = 6
    . 4 + 3 = 7
    . 4 + 4 = 8
    . 4 + 5 = 9
    . 4 + 6 = x
    . 4 + 7 = x1
    . 4 + 8 = 0
    . 4 + 9 = 1
    . 4 + x = 2
    . 4 + x1 = 3
    . 5 + 0 = 5
    . 5 + 1 = 6
    . 5 + 2 = 7
    . 5 + 3 = 8
    . 5 + 4 = 9
    . 5 + 5 = x
    . 5 + 6 = x1
    . 5 + 7 = 0
    . 5 + 8 = 1
    . 5 + 9 = 2
    . 5 + x = 3
    . 5 + x1 = 4
    . 6 + 0 = 6
    . 6 + 1 = 7
    . 6 + 2 = 8
    . 6 + 3 = 9
    . 6 + 4 = x
    . 6 + 5 = x1
    . 6 + 6 = 0
    . 6 + 7 = 1
    . 6 + 8 = 2
    . 6 + 9 = 3
    . 6 + x = 4
    . 6 + x1 = 5
    . 7 + 0 = 7
    . 7 + 1 = 8
    . 7 + 2 = 9
    . 7 + 3 = x
    . 7 + 4 = x1
    . 7 + 5 = 0
    . 7 + 6 = 1
    . 7 + 7 = 2
    . 7 + 8 = 3
    . 7 + 9 = 4
    . 7 + x = 5
    . 7 + x1 = 6
    . 8 + 0 = 8
    . 8 + 1 = 9
    . 8 + 2 = x
    . 8 + 3 = x1
    . 8 + 4 = 0
    . 8 + 5 = 1
    . 8 + 6 = 2
    . 8 + 7 = 3
    . 8 + 8 = 4
    . 8 + 9 = 5
    . 8 + x = 6
    . 8 + x1 = 7
    . 9 + 0 = 9
    . 9 + 1 = x
    . 9 + 2 = x1
    . 9 + 3 = 0
    . 9 + 4 = 1
    . 9 + 5 = 2
    . 9 + 6 = 3
    . 9 + 7 = 4
    . 9 + 8 = 5
    . 9 + 9 = 6
    . 9 + x = 7
    . 9 + x1 = 8
    . x + 0 = x
    . x + 1 = x1
    . x + 2 = 0
    . x + 3 = 1
    . x + 4 = 2
    . x + 5 = 3
    . x + 6 = 4
    . x + 7 = 5
    . x + 8 = 6
    . x + 9 = 7
    . x + x = 8
    . x + x1 = 9
    . x1 + 0 = x1
    . x1 + 1 = 0
    . x1 + 2 = 1
    . x1 + 3 = 2
    . x1 + 4 = 3
    . x1 + 5 = 4
    . x1 + 6 = 5
    . x1 + 7 = 6
    . x1 + 8 = 7
    . x1 + 9 = 8
    . x1 + x = 9
    . x1 + x1 = x

 . 0 - 0 = 0
    . 0 - 1 = x1
    . 0 - 2 = x
    . 0 - 3 = 9
    . 0 - 4 = 8
    . 0 - 5 = 7
    . 0 - 6 = 6
    . 0 - 7 = 5
    . 0 - 8 = 4
    . 0 - 9 = 3
    . 0 - x = 2
    . 0 - x1 = 1
    . 1 - 0 = 1
    . 1 - 1 = 0
    . 1 - 2 = x1
    . 1 - 3 = x
    . 1 - 4 = 9
    . 1 - 5 = 8
    . 1 - 6 = 7
    . 1 - 7 = 6
    . 1 - 8 = 5
    . 1 - 9 = 4
    . 1 - x = 3
    . 1 - x1 = 2
    . 2 - 0 = 2
    . 2 - 1 = 1
    . 2 - 2 = 0
    . 2 - 3 = x1
    . 2 - 4 = x
    . 2 - 5 = 9
    . 2 - 6 = 8
    . 2 - 7 = 7
    . 2 - 8 = 6
    . 2 - 9 = 5
    . 2 - x = 4
    . 2 - x1 = 3
    . 3 - 0 = 3
    . 3 - 1 = 2
    . 3 - 2 = 1
    . 3 - 3 = 0
    . 3 - 4 = x1
    . 3 - 5 = x
    . 3 - 6 = 9
    . 3 - 7 = 8
    . 3 - 8 = 7
    . 3 - 9 = 6
    . 3 - x = 5
    . 3 - x1 = 4
    . 4 - 0 = 4
    . 4 - 1 = 3
    . 4 - 2 = 2
    . 4 - 3 = 1
    . 4 - 4 = 0
    . 4 - 5 = x1
    . 4 - 6 = x
    . 4 - 7 = 9
    . 4 - 8 = 8
    . 4 - 9 = 7
    . 4 - x = 6
    . 4 - x1 = 5
    . 5 - 0 = 5
    . 5 - 1 = 4
    . 5 - 2 = 3
    . 5 - 3 = 2
    . 5 - 4 = 1
    . 5 - 5 = 0
    . 5 - 6 = x1
    . 5 - 7 = x
    . 5 - 8 = 9
    . 5 - 9 = 8
    . 5 - x = 7
    . 5 - x1 = 6
    . 6 - 0 = 6
    . 6 - 1 = 5
    . 6 - 2 = 4
    . 6 - 3 = 3
    . 6 - 4 = 2
    . 6 - 5 = 1
    . 6 - 6 = 0
    . 6 - 7 = x1
    . 6 - 8 = x
    . 6 - 9 = 9
    . 6 - x = 8
    . 6 - x1 = 7
    . 7 - 0 = 7
    . 7 - 1 = 6
    . 7 - 2 = 5
    . 7 - 3 = 4
    . 7 - 4 = 3
    . 7 - 5 = 2
    . 7 - 6 = 1
    . 7 - 7 = 0
    . 7 - 8 = x1
    . 7 - 9 = x
    . 7 - x = 9
    . 7 - x1 = 8
    . 8 - 0 = 8
    . 8 - 1 = 7
    . 8 - 2 = 6
    . 8 - 3 = 5
    . 8 - 4 = 4
    . 8 - 5 = 3
    . 8 - 6 = 2
    . 8 - 7 = 1
    . 8 - 8 = 0
    . 8 - 9 = x1
    . 8 - x = x
    . 8 - x1 = 9
    . 9 - 0 = 9
    . 9 - 1 = 8
    . 9 - 2 = 7
    . 9 - 3 = 6
    . 9 - 4 = 5
    . 9 - 5 = 4
    . 9 - 6 = 3
    . 9 - 7 = 2
    . 9 - 8 = 1
    . 9 - 9 = 0
    . 9 - x = x1
    . 9 - x1 = x
    . x - 0 = x
    . x - 1 = 9
    . x - 2 = 8
    . x - 3 = 7
    . x - 4 = 6
    . x - 5 = 5
    . x - 6 = 4
    . x - 7 = 3
    . x - 8 = 2
    . x - 9 = 1
    . x - x = 0
    . x - x1 = x1
    . x1 - 0 = x1
    . x1 - 1 = x
    . x1 - 2 = 9
    . x1 - 3 = 8
    . x1 - 4 = 7
    . x1 - 5 = 6
    . x1 - 6 = 5
    . x1 - 7 = 4
    . x1 - 8 = 3
    . x1 - 9 = 2
    . x1 - x = 1
    . x1 - x1 = 0
end

spec RelChord = 
Symbols then
%% primary sort for RelChord 
    sort RelChord 

%% a chord can be defined via relative positions from the root 
    preds    
        hasRelNote : RelChord * Note
    ops
%% thirdrel is a partial function defining the third (minor, major)
%% bassrel determine which note is in the bass - this must be in the chord
%% this guarantees one note at least
        thirdrel: RelChord ->? Modifier                   %(thirdrel_def)%  
        bassrel: RelChord -> Note                         %(bassrel_def)%
%% other potential interesting functions?
        seventhrel:RelChord ->? Modifier                 %(seventhrel_def)%
        sixthrel:RelChord ->? Modifier                    %(sixthrel_def)%
        fifthrel: RelChord ->? Modifier                   %(fifthrel_def)%

%% these are definitions for what each modifier means in terms of notes
%% e.g. a perfect fifth is a note interval of 7 (semitones)
 forall c:RelChord,n:Note
       . bassrel(c)=n => hasRelNote(c,n)                %(bassrel)%  
       . thirdrel(c) = minor => hasRelNote(c,3)         %(minor3rel)%
       . thirdrel(c) = major => hasRelNote(c,4)         %(major3rel)%
       . seventhrel(c) = minor => hasRelNote(c,x)       %(minor7rel)%
       . seventhrel(c) = major => hasRelNote(c,x1)      %(major7rel)%
       . sixthrel(c) = minor => hasRelNote(c,8)         %(minor6rel)%
       . sixthrel(c) = major => hasRelNote(c,9)         %(major6rel)%
       . fifthrel(c) = perfect => hasRelNote(c,7)       %(perfect5rel)%
       . fifthrel(c) = diminished => hasRelNote(c,6)    %(dimin5rel)%
       . fifthrel(c) = augmented => hasRelNote(c,8)     %(augment5rel)%
end

spec AbsChord = 
RelChord then 
%% primary sort for RelChord 
     sort AbsChord < RelChord

     preds
        hasAbsNote: AbsChord * Note                       
     ops
%% here absolute note positions are defined for specific chords
        root: AbsChord -> Note                                 %(root_def)%
%% this axiom relate relative to absolute note positions
    forall c:AbsChord,n:Note    
       . hasRelNote(c,n) <=> hasAbsNote(c,(root(c)+n))         %(reltoabs_note)%
end

spec Dmin7 = 
   AbsChord then
%% Dmin7 has D,F,A,C = 2,5,9,0
   op c:AbsChord
   . hasAbsNote(c,2)   
   . hasAbsNote(c,5)      
   . hasAbsNote(c,9)      
   . hasAbsNote(c,0)        %% p:1 %% <=> seventhrel(c) =minor
   . thirdrel(c) = minor
   . fifthrel(c) = perfect
   . bassrel(c) = 0
   . seventhrel(c) = minor  %% p:1
   . root(c) = 2
end

spec Emaj7 =
   AbsChord then 
%%Emaj7 has E,G#,B,D# = 4,8,x1,3
   op c:AbsChord
   . hasAbsNote(c,4)  
   . hasAbsNote(c,8)          %% p:3 <=> thirdrel(c) = major
   . hasAbsNote(c,x1)
   . hasAbsNote(c,3)          %% p:2 <=> seventhrel(major)
   . thirdrel(c) = major      %% p:3
   . seventhrel(c) = major    %% p:2
   . fifthrel(c) = perfect
   . bassrel(c) = 0
   . root(c) = 4              %% p:4
end


spec Generic = 
  AbsChord then
  op c:AbsChord
  . bassrel(c) = 0
  . fifthrel(c) = perfect
  . hasRelNote(c,7)
  . hasRelNote(c,0)
end

interpretation GtoDmin7: Generic to Dmin7 = 
  c |-> c
%%  hasRelNote |-> hasRelNote,
%%  bassrel |-> bassrel 

interpretation GtoEmaj7: Generic to Emaj7 = 
  c |-> c
%%  hasRelNote |-> hasRelNote,
%%  bassrel |-> bassrel 

spec NewChord = combine GtoDmin7,GtoEmaj7

%% Generalised version Dmin7 where the notes which we do not want in the blend are removed
%% corresponding features are also removed (only the seventh feature in this case
spec Gen_Dmin7 = 
   AbsChord then
   op c:AbsChord
   . hasAbsNote(c,2)
   . hasAbsNote(c,5)
%%   . hasAbsNote(c,9)
%%   . hasAbsNote(c,0)
%%   . seventhrel(c) = minor
   . fifthrel(c) = perfect
   . thirdrel(c) = minor
   . bassrel(c) = 0
   . root(c) = 2
end

%% Generalised version Dmin7 where the notes which we do not want in the blend are removed
%% corresponding features are also removed (only the third and seventh and root)
spec Gen_Emaj7 = 
   AbsChord then
   op c:AbsChord
   . hasAbsNote(c,4)
%%   . hasAbsNote(c,8)
   . hasAbsNote(c,x1)
%%   . hasAbsNote(c,3)
%%   . thirdrel(c) = major
   . bassrel(c) = 0
%%   . root(c) = 4
%%   .seventhrel(c) = major
   . fifthrel(c) = perfect
end

interpretation GtoGen_Dmin7: Generic to Gen_Dmin7 = 
  c |-> c

interpretation GtoGen_Emaj7: Generic to Gen_Emaj7 = 
  c |-> c

spec NewGenChord = combine GtoGen_Dmin7,GtoGen_Emaj7

%% this is a subsort defining a type of minor69 chord
spec Min69 = 
  RelChord then
  op c:RelChord
  . thirdrel(c) = minor
  . fifthrel(c) = perfect
  . sixthrel(c) = major
  . bassrel(c) = 0
  . hasRelNote(c,0)
  . hasRelNote(c,2)
  . hasRelNote(c,3)
  . hasRelNote(c,7)
  . hasRelNote(c,9)
end

%% this is a minor69 with a D at the root using both Min69 and AbsChord
spec Dmin69 = 
  Min69 then
  AbsChord then
  op c:AbsChord
  . root(c) = 2

%% this generates proof obligations which prove the blend is the same
%% as the definition made by hand
interpretation NewGenChordtoDmin69: NewGenChord to Dmin69 =
  c |-> c
