spec Symbols = 
    free type Note ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10
    free type Mode ::= maj | min | aug | dim
    free type ExtSymb ::= six | seven | nine | eleven | thirteen
    %% free type Rel ::= unison | m2 |  P5 | m7 | M6 %% m7 refers to minor 7th interval, P5 to perfect 5th interval
end

spec Simultaneity = Symbols then
    sorts Base Mode Ext
    ops isNote : Base -> Note
        isMode : Mode -> ModeSymb
        isExt : Ext -> ExtSymb
end


spec ChordsHaveUniqueBaseAndMode = Simultaneity
then
    . exists! b : Base . true
    . exists! m : Mode . true
end


spec Chord = 
Simultaneity then
    ops 
        base : Base
        mode : Mode
end


spec CMaj7Chord = 
Chord then
    ops 
        base : Note
        mode : Mode
        ext : Ext
        
    . isNote(base) = c
    . isMode(mode) = maj
    . isExt(ext) = seven
end


spec DMin6Chord = 
Chord then
    ops 
        base : Base
        mode : Mode
        ext : Ext
        
    . isNote(base) = d
    . isMode(mode) = min
    . isExt(ext) = six
end


view GToCMaj7 : Simultaneity to CMaj7Chord end
view GToDMin6 : Simultaneity to DMin6Chord end


spec Naive_Blend_Composition = 
combine GToCMaj7, GToDMin6
end

%% The Naive Blend is inconsistent
spec Naive_Blend_Completion = 
Naive_Blend_Composition and ChordsHaveUniqueBaseAndMode
end   


spec Maj7Simultaneity = 
Simultaneity then
    ops 
        mode : Mode
        ext : Ext
 
    . isMode(mode) = maj
    . isExt(ext) = seven
end


spec D6Simultaneity = 
Simultaneity then
    ops 
        base : Base
        ext : Ext
        
    . isNote(base) = d
    . isExt(ext) = six
end


view D6ChordToDMin6Chord :  D6Simultaneity to DMin6Chord
view Maj7ChordToCMaj7Chord : Maj7Simultaneity to CMaj7Chord


view GToD6Chord : Simultaneity to D6Simultaneity
view GToMaj7Chord : Simultaneity to Maj7Simultaneity


spec Relaxed_Blend_Composition = 
combine GToD6Chord,GToMaj7Chord
end

spec Relaxed_Blend_Completion = 
Relaxed_Blend_Composition and  ChordsHaveUniqueBaseAndMode
end


spec ChordProgression4th  = 
  Chord then
    first : Chord
    second : Chord
    third : Chord
    fourth : Chord
end

spec ChordProgression1 = ChordProgression4th then
  .first = chord(0,maj) %%Cmaj
  %% .hasExt (first,seven)
  .second = chord(2,min) %% Dmin
  %% .hasExt (second,seven)
  .third = chord(9,maj) %% Amin
  %% .hasExt (first,seven)
  .fourth = chord(4,maj) %% Emaj7
  .hasExt (fourth,seven)
end


spec ChordProgression2 = ChordProgression4th then
  .first = chord(0,maj) %%Cmaj
  %% .hasExt (first,seven)
  .second = chord(2,min) %% Dmin
  %% .hasExt (second,seven)
  .third = chord(9,maj) %% Amin
  %% .hasExt (first,seven)
  .fourth = chord(4,maj) %% Emaj7
  .hasExt (fourth,seven)
end


%% Define background knowledge here to complete and simulate blend.
%% spec InvalidStuff = Chord then
%%    . not rootsRel = m7 /\ pfRel = M6 /\ fRel = unison /\ bassRel = P5
%%    . not rootsRel = m7 /\ pfRel = unison /\ fRel = unison /\ bassRel = m2
%%    . not rootsRel = P5 /\ pfRel = M6 /\ fRel = unison /\ bassRel = P5
%%    . not rootsRel = P5 /\ pfRel = unison /\ fRel = unison /\ bassRel = m2
%% end