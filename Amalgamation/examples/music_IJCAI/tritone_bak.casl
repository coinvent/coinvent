spec Symbols = 
%%  Note can be interpreted as an absolute note
%%  Or an interval
    generated type Note ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | x | x1
%% can describe interals in the following way
    generated type Modifier ::= major | minor | diminished | perfect | augmented
%% these operators act on intervals
%% e.g. a fifth + a fifth = a ninth
%% start at a C, go up a fith, you get to G
%% go up a fifth from G, you get to D
%% so an interval which is 7, plus another, you get 2
    ops __ + __: Note * Note -> Note
		suc : Note -> Note 
 . suc(0) = 1 %(AxSucc0:p:100:r:0)%
 . suc(1) = 2 %(AxSucc1:p:100:r:0)%
 . suc(2) = 3 %(AxSucc2:p:100:r:0)%
 . suc(3) = 4 %(AxSucc3:p:100:r:0)%
 . suc(4) = 5 %(AxSucc4:p:100:r:0)%
 . suc(5) = 6 %(AxSucc5:p:100:r:0)%
 . suc(6) = 7 %(AxSucc6:p:100:r:0)%
 . suc(7) = 8 %(AxSucc7:p:100:r:0)%
 . suc(8) = 9 %(AxSucc8:p:100:r:0)%
 . suc(9) = x %(AxSucc9:p:100:r:0)%
 . suc(x) = x1 %(AxSucc10:p:100:r:0)%
 . suc(x1) = 0 %(AxSucc11:p:100:r:0)%

  . not major = minor
  . not major = diminished 
  . not major = perfect
  . not major = augmented
  . not minor = diminished
  . not minor = perfect
  . not minor = augmented
  . not diminished = perfect
  . not diminished = augmented
  . not perfect = augmented

    . not 0 = 1
    . not 0 = 2
    . not 0 = 3 
    . not 0 = 4
    . not 0 = 5
    . not 0 = 6
    . not 0 = 7
    . not 0 = 8
    . not 0 = 9 
    . not 0 = x
    . not 0 = x1

 forall c, d: Note 
    . suc(c) = suc(d) <=> c = d %(AxSuccEql:p:100:r:0)%
end

spec RelChord = 
Symbols then
%% primary sort for RelChord 
    sort RelChord 

%% a chord can be defined via relative positions from the root 
    preds    
        hasRelNote : RelChord * Note
    ops
%% thirdrel is a partial function defining the third (minor, major)
%% bassrel determine which note is in the bass - this must be in the chord
%% this guarantees one note at least
        thirdrel: RelChord ->? Modifier                   %(thirdrel_def:r:0)%  
        bassrel: RelChord -> Note                         %(bassrel_def:r:0)%
%% other potential interesting functions?
        seventhrel:RelChord ->? Modifier                 %(seventhrel_def:r:0)%
        sixthrel:RelChord ->? Modifier                    %(sixthrel_def:r:0)%
        fifthrel: RelChord ->? Modifier                   %(fifthrel_def:r:0)%

%% these are definitions for what each modifier means in terms of notes
%% e.g. a perfect fifth is a note interval of 7 (semitones)
 forall c:RelChord,n:Note
       . bassrel(c)=n => hasRelNote(c,n)                %(bassrel:r:0)%  
       . thirdrel(c) = minor => hasRelNote(c,3)         %(minor3rel:r:0)%
       . thirdrel(c) = major => hasRelNote(c,4)         %(major3rel:r:0)%
       . seventhrel(c) = minor => hasRelNote(c,x)       %(minor7rel:r:0)%
       . seventhrel(c) = major => hasRelNote(c,x1)      %(major7rel:r:0)%
       . sixthrel(c) = minor => hasRelNote(c,8)         %(minor6rel:r:0)%
       . sixthrel(c) = major => hasRelNote(c,9)         %(major6rel:r:0)%
       . fifthrel(c) = perfect => hasRelNote(c,7)       %(perfect5rel:r:0)%
       . fifthrel(c) = diminished => hasRelNote(c,6)    %(dimin5rel:r:0)%
       . fifthrel(c) = augmented => hasRelNote(c,8)     %(augment5rel:r:0)%
end

spec AbsChord = 
RelChord then 
%% primary sort for RelChord 
     sort AbsChord < RelChord

     preds
        hasAbsNote: AbsChord * Note                       
     ops
%% here absolute note positions are defined for specific chords
        root: AbsChord -> Note                                 %(root_def:r:0)%
%% this axiom relate relative to absolute note positions
    forall c:AbsChord,n:Note    
       . hasRelNote(c,n) <=> hasAbsNote(c,(root(c)+n))         %(reltoabs_note:r:0)%
end

%%% CADENCE
%% this is simply two chords, and relation between them
%% rootRel means the relation between the first and second
%% e.g. rootRel(G major,C major) = 7
spec Cadence = 
  RelChord then
  ops prefinal: RelChord
      final: RelChord
      rootRel: RelChord * RelChord -> Note
end

%%% ABS_CADENCE
%% an absolute cadence is a cadence which is made absolute by fixing the root
%% the root of the prefinal can be calculated from the the rootRel function
spec AbsCadence = 
  Cadence then
  AbsChord then
  op finalroot: Note
  .  root(final as AbsChord) = finalroot  
  .  root(prefinal as AbsChord) = finalroot + rootRel(prefinal,final)
end


%%% PERFECT CADENCE
%% This is the specification of a perfect Cadence
spec CPerfectCadence = 
  AbsCadence then 
    . hasAbsNote(prefinal as AbsChord,7) 	%(perf_pref7:p:2:r:1)%	%priority(2)%
    . hasAbsNote(prefinal as AbsChord,x1) 	%(perf_prefx1:p:3:r:1)%	%priority(3)%
    . hasAbsNote(prefinal as AbsChord,2) 	%(perf_pref2:p:1:r:1)%	%priority(1)%
    . hasAbsNote(prefinal as AbsChord,5) 	%(perf_pref5:p:2:r:1)%	%priority(2)%
    . hasAbsNote(final as AbsChord,0) 		%(perf_fin0:p:3:r:1)%	%priority(3)%
    . hasAbsNote(final as AbsChord,3) 		%(perf_fin3:p:1:r:1)%	%priority(1)%
    . hasAbsNote(final as AbsChord,4) 		%(perf_fin4:p:1:r:1)%	%priority(1)%
    . hasAbsNote(final as AbsChord,7) 		%(perf_fin7:p:2:r:1)%	%priority(2)%
end 

%%% Generalised PERFECT CADENCE
%% This is the specification of a perfect Cadence
spec GenCPerfectCadence = 
  AbsCadence then 
    . hasAbsNote(prefinal as AbsChord,7)
    . hasAbsNote(prefinal as AbsChord,x1)
    . hasAbsNote(prefinal as AbsChord,5)
    . hasAbsNote(final as AbsChord,0)
    . hasAbsNote(final as AbsChord,7)
end 

%%% PHRYGIAN CADENCE
spec CPhrygianCadence = 
  AbsCadence then
    . hasAbsNote(prefinal as AbsChord,x) %(phry_prefx:p:2:r:1)%	%priority = 2
    . hasAbsNote(prefinal as AbsChord,1) %(phry_pref1:p:3:r:1)%	%priority = 3
    . hasAbsNote(prefinal as AbsChord,5) %(phry_pref5:p:1:r:1)%	%priority = 1
    . hasAbsNote(final as AbsChord,0)    %(phry_fin0:p:3:r:1)%	%priority = 3
    . hasAbsNote(final as AbsChord,7)    %(phry_fin7:p:2:r:1)%	%priority = 2
end

%%% GENPHRYGIAN CADENCE
spec GenCPhrygianCadence = 
  AbsCadence then
    . hasAbsNote(prefinal as AbsChord,x)
    . hasAbsNote(prefinal as AbsChord,1)
    . hasAbsNote(final as AbsChord,0)
    . hasAbsNote(final as AbsChord,7)

end

spec Generic = AbsCadence

interpretation GtoGenperf: Generic to GenCPerfectCadence

interpretation GtoGenphryg: Generic to GenCPhrygianCadence

spec Blend_gen = combine GtoGenperf,GtoGenphryg end

interpretation GtoPerf: Generic to CPerfectCadence

interpretation GtoPhryg: Generic to CPhrygianCadence

spec Blend = combine GtoPerf, GtoPhryg end



spec Dom7Chord = 
  RelChord then
  sort Dom7Chord < RelChord
   forall c: Dom7Chord
  . hasRelNote(c,0)
  . fifthrel(c) = perfect
  . thirdrel(c) = major
  . seventhrel(c) = minor
end

spec Blendwithdom7 = 
  Blend then Dom7Chord then
  . root(prefinal as AbsChord) = 1
  . hasRelNote(prefinal,0) %implied
  . hasRelNote(prefinal,4) %implied
  . hasRelNote(prefinal,x) %implied
end



