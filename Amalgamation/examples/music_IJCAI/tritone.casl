spec Symbols = 
%%  Note can be interpreted as an absolute note
%%  Or an interval
    generated type Note ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | x | x1
%% can describe interals in the following way
%%     generated type Modifier ::= major | minor | diminished | perfect | augmented
%% %% these operators act on intervals
%% %% e.g. a fifth + a fifth = a ninth
%% %% start at a C, go up a fith, you get to G
%% %% go up a fifth from G, you get to D
%% %% so an interval which is 7, plus another, you get 2
    ops __ + __: Note * Note -> Note
		suc : Note -> Note 
 . suc(0) = 1 %(AxSucc0:p:100:r:0)%
 . suc(1) = 2 %(AxSucc1:p:100:r:0)%
 . suc(2) = 3 %(AxSucc2:p:100:r:0)%
 . suc(3) = 4 %(AxSucc3:p:100:r:0)%
 . suc(4) = 5 %(AxSucc4:p:100:r:0)%
 . suc(5) = 6 %(AxSucc5:p:100:r:0)%
 . suc(6) = 7 %(AxSucc6:p:100:r:0)%
 . suc(7) = 8 %(AxSucc7:p:100:r:0)%
 . suc(8) = 9 %(AxSucc8:p:100:r:0)%
 . suc(9) = x %(AxSucc9:p:100:r:0)%
 . suc(x) = x1 %(AxSucc10:p:100:r:0)%
 . suc(x1) = 0 %(AxSucc11:p:100:r:0)%

%%   . not major = minor
%%   . not major = diminished 
%%   . not major = perfect
%%   . not major = augmented
%%   . not minor = diminished
%%   . not minor = perfect
%%   . not minor = augmented
%%   . not diminished = perfect
%%   . not diminished = augmented
%%   . not perfect = augmented

    . not 0 = 1
    . not 0 = 2
    . not 0 = 3 
    . not 0 = 4
    . not 0 = 5
    . not 0 = 6
    . not 0 = 7
    . not 0 = 8
    . not 0 = 9 
    . not 0 = x
    . not 0 = x1

 forall c, d: Note 
    . suc(c) = suc(d) <=> c = d   %(AxSuccEql:p:100:r:0)%
    . suc(c) = 0 => c = x1        %(AxSucc0-11:p:100:r:0)%
    . c + 0 = c                   %(AxSuccDontKnow:p:100:r:0)%
    . c + suc(d) = suc(c+d)       %(AxSuccAdd:p:100:r:0)%
end

spec Chord = Symbols then   
  sorts 
        Chord
  ops
     %% Set the absolute root of the chord. 
        root: Chord -> Note   %(root_def:r:0)%

  preds
     %% Define an absolute note 
        hasAbsNote: Chord * Note   
        hasRelNote : Chord * Note

  %% Relate absolute and relative notes
  forall n:Note, c:Chord 
    . hasRelNote(c,n) <=> hasAbsNote(c,(root(c)+n))  %(reltoabs_note:r:0)%

  %% Define forbidden dissonances
  forall n:Note, c:Chord
    %% Two notes that can be interpreted as major and minor 3rd
    . not (hasRelNote(c,3) /\ hasRelNote(c,4))  %(dis_minorMajorThird:r:0)%
    %% Two notes that can be interpreted as perfect and diminished 5th
    . not (hasRelNote(c,7) /\ hasRelNote(c,6))  %(dis_perfectDimFifth:r:0)%
    %% One haftone away from the root is often quite dissonant
    . not hasRelNote(c,1)                       %(dis_second:r:0)%
    %% A minor 7th (rel 10) with a major 6th (rel 9) is pretty dissonant
    . not (hasRelNote(c,x) /\ hasRelNote(c,9)) %(dis_seventhsixth:r:0)%

  %% Allow only triads:
  forall c:Chord. 
    (hasRelNote(c,3) \/ hasRelNote(c,4)) /\  %% minor or major third
    hasRelNote(c,7) %% perfect fifth
    
  %% Alternative formulation. This may trigger inconsistencies faster for the theorem prover.
  forall c:Chord  
    . exists n: Note 
      . hasAbsNote(c,n) /\ 
        root(c) = n /\ 
        (hasAbsNote(c,n+3) \/ hasAbsNote(c,n+4)) /\  %% has minor or major third
        not (hasAbsNote(c,n+3) /\ hasAbsNote(c,n+4)) /\  %% but not both of them
        hasAbsNote(c,n+7) %% has perfect fifth
end



%%% CADENCE
%% this is simply two chords, and relation between them
%% rootRel means the relation between the first and second
%% e.g. rootRel(G major,C major) = 7
spec Cadence = 
  Chord then
  ops prefinal: Chord
      final: Chord
      %% rootRel: RelChord * RelChord -> Note      
  %% . root(prefinal) = root(final) + rootRel(prefinal,final)
end


%%% PERFECT CADENCE
%% This is the specification of a perfect Cadence
spec CPerfectCadence = 
  Cadence then 
    %% Gdom7
    . root(prefinal) = 7    
    . hasAbsNote(prefinal,7) 	%priority(2)% %% root (G)
    . hasRelNote(prefinal,0)  %priority(2)%
    . hasAbsNote(prefinal,x1) %priority(3)% %% major third (B)
    . hasRelNote(prefinal,4)  %priority(3)%    
    . hasAbsNote(prefinal,2) 	%priority(1)% %% fifths (D)
    . hasRelNote(prefinal,7)  %priority(1)%
    . hasAbsNote(prefinal,5) 	%priority(2)% %% minor seventh (F)
    . hasRelNote(prefinal,x)  %priority(3)%
    %%C5
    . root(final) = 0
    . hasAbsNote(final,0) 		%priority(3)% %% root (C)
    . hasRelNote(final,0)     %priority(3)
    %% . hasAbsNote(final,3) 		%priority(1)% %% min third (D#)
    %% . hasRelNote(final,3)     %priority(1)% 
    %% . hasAbsNote(final,4) 		%priority(1)% %% No idea... another third?
    %% . hasRelNote(final,4)     %priority(1)%
    . hasAbsNote(final,7) 		%priority(2)% %% fifth (G)
    . hasRelNote(final,7)     %priority(2)% 
end 


%%% PHRYGIAN CADENCE
spec CPhrygianCadence = 
  Cadence then
    %% Bbmin
    . root(prefinal) = x
    . hasAbsNote(prefinal,x) %priority(2)% %% root (Bb)
    . hasRelNote(prefinal,0) %priority(2)%
    . hasAbsNote(prefinal,1) %priority(3)% %% minor third (C# / Db)
    . hasRelNote(prefinal,3) %priority(3)% 
    . hasAbsNote(prefinal,5) %priority(1)% %% fifth (F)
    . hasRelNote(prefinal,7) %priority(1)% 
    %% C5
    . root(final) = 0
    . hasAbsNote(final,0)    %priority(3)% %% root(C)
    . hasRelNote(final,0)    %priority(3)%
    . hasAbsNote(final,7)    %priority(2)% %% fifth(G)
    . hasRelNote(final,7)    %priority(2)%
end

%% Tritone
spec Tritone = Cadence then 
  %% Dbmaj7
    . root(prefinal) = 1    
    . hasAbsNote(prefinal,1) %% root(Db)
    . hasRelNote(prefinal,0) 
    . hasAbsNote(prefinal,8) %% 5th. This is deduced from the relative fifth
    . hasRelNote(prefinal,7) 
    . hasAbsNote(prefinal,x1) %% 7th. 
    . hasRelNote(prefinal,x) %% 7th. 
  
  %%Cmin
  . root(final) = 0
  . hasAbsNote(final,0)     %priority(3)% %% root (C)
  . hasRelNote(final,0)     %priority(3)
  . hasAbsNote(final,3)     %priority(1)% %% min third (D#)
  . hasRelNote(final,3)     %priority(1)% 
  . hasAbsNote(final,7)     %priority(2)% %% fifth (G)
  . hasRelNote(final,7)     %priority(2)% 
end


spec GenericNaive = Cadence 
then 
    %% A chord with the root played, with a fifths and with an F
    . hasRelNote(prefinal,0) %priority(2)% %% root
    . hasAbsNote(prefinal,5) %priority(1)% %% F
    . hasRelNote(prefinal,7) %priority(1)% %% fifth

    %%C5
    %% . root(final) = 0
    . hasAbsNote(final,0)     %priority(3)% %% root (C)
    . hasRelNote(final,0)     %priority(3)
    . hasAbsNote(final,7)     %priority(2)% %% fifth (G)
    . hasRelNote(final,x)     %priority(2)% 
end

interpretation NGtoPerf : GenericNaive to CPerfectCadence
interpretation NGtoPhryg : GenericNaive to CPhrygianCadence



spec BlendCompositionNaive_inconsistent = 
%% combine NGtoPerf, NGtoPhryg
Cadence
then 
    
  . root(prefinal) = 7    
  . hasAbsNote(prefinal,7)  %priority(2)% %% G
  . hasAbsNote(prefinal,x1) %priority(3)% %% B
  . hasAbsNote(prefinal,2)  %priority(1)% %% D 
  . hasAbsNote(prefinal,5)  %priority(2)% %% F
  . root(prefinal) = x
  . hasAbsNote(prefinal,x) %priority(2)% %% Bb
  . hasAbsNote(prefinal,1) %priority(3)% %% C# / Db
  . hasAbsNote(prefinal,5) %priority(1)% %% F

  . hasRelNote(prefinal,4)  %priority(3)% %% maj 3rd  
  . hasRelNote(prefinal,3)  %priority(3)% %% min 3rd   
  . hasRelNote(prefinal,x)  %priority(2)% %% 7th
  . hasRelNote(prefinal,0)  %priority(2)% %% root
  . hasRelNote(prefinal,0)  %priority(2)% %% root
  . hasRelNote(prefinal,7)  %priority(1)% %% 5th
  . hasRelNote(prefinal,7)  %priority(1)% %% 5th


  %%Cmin
  %% . root(final) = 0
  . hasAbsNote(final,0)     %priority(3)% %% root (C)
  . hasRelNote(final,0)     %priority(3)
  . hasAbsNote(final,3)     %priority(1)% %% min third (D#)
  . hasRelNote(final,3)     %priority(1)% 
  . hasAbsNote(final,7)     %priority(2)% %% fifth (G)
  . hasRelNote(final,7)     %priority(2)%   
end

spec BlendCompositionNaive_assumeDbMaj = 
%% combine NGtoPerf, NGtoPhryg
Cadence
then     
  . root(prefinal) = 1    %% This will not be generated by the blending...
  %% . hasAbsNote(prefinal,7)  %priority(2)% %% G      %% relNote 6 --- diminished 5th (dissonant with perfect 5)
  . hasAbsNote(prefinal,x1) %priority(3)% %% B      %% relNote 10 --- 7th
  %% . hasAbsNote(prefinal,2)  %priority(1)% %% D      %% relNote 1 -- diminished 2nd (dissonant with root)
  . hasAbsNote(prefinal,5)  %priority(2)% %% F      %% relNote 4 -- maj third
  %% . hasAbsNote(prefinal,x) %priority(2)% %% Bb      %% relNote 9 -- diminished 7th (dissonant with dominant 7)
  . hasAbsNote(prefinal,1) %priority(3)% %% C# / Db %% relNote 0 -- root


  . hasRelNote(prefinal,4)  %priority(3)% %% maj 3rd   
  %% . hasRelNote(prefinal,3)  %priority(3)% %% min 3rd
  . hasRelNote(prefinal,x)  %priority(2)% %% 7th
  . hasRelNote(prefinal,0)  %priority(2)% %% root
  . hasRelNote(prefinal,0)  %priority(2)% %% root
  . hasRelNote(prefinal,7)  %priority(1)% %% 5th
  . hasRelNote(prefinal,7)  %priority(1)% %% 5th


  %%Cmin
  %% . root(final) = 0
  . hasAbsNote(final,0)     %priority(3)% %% root (C)
  . hasRelNote(final,0)     %priority(3)
  . hasAbsNote(final,3)     %priority(1)% %% min third (D#)
  . hasRelNote(final,3)     %priority(1)% 
  . hasAbsNote(final,7)     %priority(2)% %% fifth (G)
  . hasRelNote(final,7)     %priority(2)%   
end

spec BlendCompositionNaive_assumeGMaj = 
%% combine NGtoPerf, NGtoPhryg
Cadence
then     
  . root(prefinal) = 7    %% This will not be generated by the blending...
  . hasAbsNote(prefinal,7)  %priority(2)% %% G      %% relNote 0 --- root
  . hasAbsNote(prefinal,x1) %priority(3)% %% B      %% relNote 4 --- maj third
  . hasAbsNote(prefinal,2)  %priority(1)% %% D      %% relNote 5 --- 5th
  . hasAbsNote(prefinal,5)  %priority(2)% %% F      %% relNote 10 --- 7th
  %% . hasAbsNote(prefinal,x) %priority(2)% %% Bb      %% relNote 3 -- min third (dissonant)
  %% . hasAbsNote(prefinal,1) %priority(3)% %% C# / Db %% relNote 6 -- dim 5th (dissonant)


  . hasRelNote(prefinal,4)  %priority(3)% %% maj 3rd   
  %% . hasRelNote(prefinal,3)  %priority(3)% %% min 3rd
  . hasRelNote(prefinal,x)  %priority(2)% %% 7th
  . hasRelNote(prefinal,0)  %priority(2)% %% root
  . hasRelNote(prefinal,0)  %priority(2)% %% root
  . hasRelNote(prefinal,7)  %priority(1)% %% 5th
  . hasRelNote(prefinal,7)  %priority(1)% %% 5th


  %%Cmin
  %% . root(final) = 0
  . hasAbsNote(final,0)     %priority(3)% %% root (C)
  . hasRelNote(final,0)     %priority(3)
  . hasAbsNote(final,3)     %priority(1)% %% min third (D#)
  . hasRelNote(final,3)     %priority(1)% 
  . hasAbsNote(final,7)     %priority(2)% %% fifth (G)
  . hasRelNote(final,7)     %priority(2)%   
end

spec BlendCompositionNaive_assumeDbMin = 
%% combine NGtoPerf, NGtoPhryg
Cadence
then     
  . root(prefinal) = 1    
  %% . hasAbsNote(prefinal,7)  %priority(2)% %% G      %% relNote 6 --- diminished 5th (dissonant with perfect 5)
  . hasAbsNote(prefinal,x1) %priority(3)% %% B         %% relNote 10 --- 7th
  %% . hasAbsNote(prefinal,2)  %priority(1)% %% D      %% relNote 1 -- diminished 2nd (dissonant with root)
  %% . hasAbsNote(prefinal,5)  %priority(2)% %% F      %% relNote 4 -- maj third (dissonant with min third)
  %% . hasAbsNote(prefinal,x) %priority(2)% %% Bb      %% relNote 9 -- diminished 7th (dissonant with dominant 7)
  . hasAbsNote(prefinal,1) %priority(3)% %% C# / Db %% relNote 0 -- root


  %% . hasRelNote(prefinal,4)  %priority(3)% %% maj 3rd   %% This should clash with hasAbsNote(prefinal,4)
  . hasRelNote(prefinal,3)  %priority(3)% %% min 3rd   %% This should clash with hasAbsNote(prefinal,5)
  . hasRelNote(prefinal,x)  %priority(2)% %% 7th
  . hasRelNote(prefinal,0)  %priority(2)% %% root
  . hasRelNote(prefinal,0)  %priority(2)% %% root
  . hasRelNote(prefinal,7)  %priority(1)% %% 5th
  . hasRelNote(prefinal,7)  %priority(1)% %% 5th


  %%Cmin
  %% . root(final) = 0
  . hasAbsNote(final,0)     %priority(3)% %% root (C)
  . hasRelNote(final,0)     %priority(3)
  . hasAbsNote(final,3)     %priority(1)% %% min third (D#)
  . hasRelNote(final,3)     %priority(1)% 
  . hasAbsNote(final,7)     %priority(2)% %% fifth (G)
  . hasRelNote(final,7)     %priority(2)%   
end

spec BlendCompositionNaive_assumeCMaj = 
%% combine NGtoPerf, NGtoPhryg
Cadence
then     
  . root(prefinal) = 0    
  . hasAbsNote(prefinal,7)  %priority(2)% %% G      %% relNote 7 --- 5th
  %% . hasAbsNote(prefinal,x1) %priority(3)% %% B   %% relNote 11 --- should clash with in Cmaj chord. 
  %% . hasAbsNote(prefinal,2)  %priority(1)% %% D      %% relNote 2 -- 2nd should not sound nice in Cmaj
  %% . hasAbsNote(prefinal,5)  %priority(2)% %% F      %% relNote 5 -- 6th should not sound nice in Cmaj
  . hasAbsNote(prefinal,x) %priority(2)% %% Bb      %% relNote x -- 7th 
  %% . hasAbsNote(prefinal,1) %priority(3)% %% C# / Db %% relNote 1 -- should sound dissonant in Cmaj
  . hasAbsNote(prefinal,5) %priority(1)% %% F       %% relNote 4 -- maj third

  . hasRelNote(prefinal,4)  %priority(3)% %% maj 3rd   
  %% . hasRelNote(prefinal,3)  %priority(3)% %% min 3rd   
  . hasRelNote(prefinal,x)  %priority(2)% %% 7th
  . hasRelNote(prefinal,0)  %priority(2)% %% root
  . hasRelNote(prefinal,0)  %priority(2)% %% root
  . hasRelNote(prefinal,7)  %priority(1)% %% 5th
  . hasRelNote(prefinal,7)  %priority(1)% %% 5th


  %%Cmin
  %% . root(final) = 0
  . hasAbsNote(final,0)     %priority(3)% %% root (C)
  . hasRelNote(final,0)     %priority(3)
  . hasAbsNote(final,3)     %priority(1)% %% min third (D#)
  . hasRelNote(final,3)     %priority(1)% 
  . hasAbsNote(final,7)     %priority(2)% %% fifth (G)
  . hasRelNote(final,7)     %priority(2)%   
end




