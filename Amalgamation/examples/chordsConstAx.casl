%% Set up the vocabulary
spec Symbols = 
    free type NoteSymb ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | x0
    free type ModeSymb ::= min | maj | dim | aug
    free type ExtSymb ::= six | seven | nine | eleven | thirteen
end

%% A theory about chords
spec Chord = 
Symbols then
    sorts Chord Base Mode Ext
    ops 
        triadChord : Base * Mode -> Chord
        
        isBase : Base -> NoteSymb
        isMode : Mode -> ModeSymb
        isExt : Ext -> ExtSymb
    
    preds    
        hasExt : Chord * Ext
end


%% These instances inherit from the chord spec. 
spec EMaj7Chord = 
Chord then
    ops eMaj7Chord : Chord
    eBase : Base
    majMode : Mode
    sevenExt : Ext
    . isBase(eBase) = 4
    . isMode(majMode) = maj
    . isExt(sevenExt) = seven
    . eMaj7Chord = triadChord(eBase,majMode)
    . hasExt(eMaj7Chord, sevenExt)
end

spec DMinChord = 
Chord then
    ops dMinChord : Chord
    dBase : Base
    minMode : Mode
    . isBase(dBase) = 2
    . isMode(minMode) = min
    . dMinChord = triadChord(dBase,minMode)
end

