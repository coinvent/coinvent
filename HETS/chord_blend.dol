
%display __<=__ %LATEX __\leq__
%display __>=__ %LATEX __\geq__

%prec(
  { __ -? __ , __ - __, __ + __ } <
  { __*__, __ /? __, __ / __, __div__, __mod__, __ quot __, __rem__ }
)%

%prec(
  { __*__, __ /? __, __ / __, __div__, __mod__, __ quot __, __rem__ } <
  { __ ^ __}
)%

%prec( {-__} <> {__ ^ __} )%

%prec { __ E __ } < { __ ::: __ }

%left_assoc __ + __, __ * __, __ @@ __

%number __@@__

%floating __:::__, __E__

spec Nat = %mono

  free type Nat ::= 0 | suc(pre:? Nat)

  preds   __ <= __, __ >= __, __dvd__,
          __ <  __, __ > __:   Nat * Nat;
          even, odd:           Nat

  ops   __! :                       Nat -> Nat;
        __ + __, __ * __, __ ^ __,
        min, max, __ -!__ :         Nat * Nat ->  Nat;
        __ -?__, __ /? __,
        __ div __, __ mod __:       Nat * Nat ->? Nat;

  %% Operations to represent natural numbers with digits:

  ops  1: Nat = suc (0);                      %(1_def_Nat)%
       2: Nat = suc (1);                      %(2_def_Nat)%
       3: Nat = suc (2);                      %(3_def_Nat)%
       4: Nat = suc (3);                      %(4_def_Nat)%
       5: Nat = suc (4);                      %(5_def_Nat)%
       6: Nat = suc (5);                      %(6_def_Nat)%
       7: Nat = suc (6);                      %(7_def_Nat)%
       8: Nat = suc (7);                      %(8_def_Nat)%
       9: Nat = suc (8);                      %(9_def_Nat)%
       x: Nat = suc (9);                      %(x_def_Nat)%
       x1: Nat = suc(x);                      %(x1_def_Nat)%
       __ @@ __ (m:Nat;n:Nat): Nat = (m * suc(9)) + n   %(decimal_def)%

  %% implied operation attributes :

  ops __+__: Nat * Nat -> Nat,
             comm, assoc, unit 0; %implied
      __*__: Nat * Nat -> Nat,
             comm, assoc, unit 1; %implied
      min:   Nat * Nat -> Nat,
             comm, assoc;         %implied
      max:   Nat * Nat -> Nat,
             comm, assoc, unit 0; %implied

  forall m,n,r,s,t : Nat

  %% axioms concerning predicates

     . 0 <= n                           %(leq_def1_Nat)% %simp
     . m dvd n <=> (exists k : Nat . n = m * k) %(dvd_def_Nat)% %simp
     . not suc(n) <= 0                  %(leq_def2_Nat)% %simp
     . suc(m) <= suc(n) <=> m <= n      %(leq_def3_Nat)% %simp

     . m >= n <=> n <= m                %(geq_def_Nat)% %simp
     . m < n  <=> (m <= n /\ not m=n)   %(less_def_Nat)% %simp
     . m > n  <=> n < m                 %(greater_def_Nat)% %simp

     . even(0)                          %(even_0_Nat)% %simp
     . even(suc(m)) <=> odd(m)          %(even_suc_Nat)% %simp
     . odd(m) <=> not even(m)           %(odd_def_Nat)% %simp

  %% axioms concerning operations

     . 0! = 1                           %(factorial_0)% %simp
     . suc(n)! =suc(n)*n!               %(factorial_suc)% %simp

     . 0 + m = m                        %(add_0_Nat)% %simp
     . suc(n) + m = suc(n + m)          %(add_suc_Nat)% %simp

     . 0 * m = 0                        %(mult_0_Nat)% %simp
     . suc(n) * m = (n * m) + m         %(mult_suc_Nat)% %simp
     . m ^ 0 = 1                        %(power_0_Nat)% %simp
     . m ^ suc(n)  = m * m ^ n          %(power_suc_Nat)% %simp

     . min(m,n) = m when m <= n else n  %(min_def_Nat)%
     . max(m,n) = n when m <= n else m  %(max_def_Nat)%

     . n -! m = 0      if m >  n        %(subTotal_def1_Nat)% %simp
     . n -! m = n -? m if m <= n        %(subTotal_def2_Nat)% %simp

     . def(m-?n) <=> m >= n             %(sub_dom_Nat)% %implied
     . m -? n = r <=> m = r + n         %(sub_def_Nat)%

     . def(m /? n) <=>
       not n=0 /\ m mod n = 0               %(divide_dom_Nat)% %implied
     . not def(m /? 0)                      %(divide_0_Nat)%
     . ( m /? n = r <=> m = r * n ) if n>0  %(divide_Pos_Nat)%

     . def ( m div n ) <=> not n=0             %(div_dom_Nat)% %implied
     . m div n = r <=>
       (exists s: Nat . m = n*r + s /\ s < n)  %(div_Nat)%

     . def ( m mod n ) <=> not n=0             %(mod_dom_Nat)% %implied
     . m mod n = s <=>
       (exists r: Nat . m = n*r + s /\ s < n)  %(mod_Nat)%

  %% important laws

     . (r + s) * t = (r * t) + (s * t)  %(distr1_Nat)% %implied
     . t * (r + s) = (t * r) + (t * s)  %(distr2_Nat)% %implied

then %mono
     sort Pos = { p: Nat . p > 0 } %(Pos_def)%
     ops   suc: Nat -> Pos;
           1: Pos = suc(0);             %(1_as_Pos_def)%
           __*__: Pos * Pos -> Pos;
           __+__: Pos * Nat -> Pos;
           __+__: Nat * Pos -> Pos

then %implies

     forall m,n,r,s:Nat
     . min(m,0)=0                                  %(min_0)%  %simp
     . m = (m div n) * n + (m mod n) if not n = 0  %(div_mod_Nat)%
     . m ^(r+s) = m^r * m^s                        %(power_Nat)%

end 




spec Nat_mod12 = 
   Nat then
   sort Note = {n:Nat. n >= 0 /\ n<=9} 
   ops __ ++ __: Note * Note -> Note

  forall x,y: Note
     . x ++ y = ((x + y) mod x1) as Note

end
