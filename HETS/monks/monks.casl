%% The Link schema is similar to Marco's spec, but "Entity" is a proper sort
spec Link =
    sorts Link
          Entity
    preds linked : Entity * Link
    
    forall l: Link . exists e1: Entity, e2: Entity . 
        not e1 = e2 /\ linked(e1,l) /\ linked(e2,l) /\ 
        not exists e3: Entity . 
            (not e3 = e1 /\ not e3 = e2 /\ linked(e3,l))
end
%% The Time schema is as in Marco's spec.
spec Time =
    sort Time
    pred __<__ : Time * Time
end

%% This schema represents the commonsense knowledge, that if two trajectors move in the opposite direction, they will meet at a certain meetingLocation at a certain meetingTime. Goguen (2006) uses a similar approach. Explicitly representing this is a bit of cheating, but I found no other simple solution. In fact, it would be great to have a sophisitcated formalization of continuous movement. Continuos movement should be an extension of the Source-Path-Goal image schema. MeetingSpace inherits structure from Time (denoted by "= Time then")

spec MeetingSpace = Time
then
    sorts Trajector 
          Location
    ops source: Trajector -> Location
        goal: Trajector -> Location
        start: Trajector -> Time
        stop : Trajector -> Time
        position: Trajector * Time -> Location
        meetingLoc : Location
        meetingTime : Time
    
    forall m1,m2 : Trajector 
        . (source(m1) = goal(m2) /\ goal(m2) = source(m1) /\ 
           start(m1) = start(m2))
           => (position(m1,meetingTime) = meetingLoc /\ 
               position(m2,meetingTime) = meetingLoc)
end

%% This is the main Source-Path-Goal (SPG) image schema. It inherits structure from Link, Time and MeetingSpace. The translation from Link to SPG that Marco mentions is formalized using the "with" keyword, in the obvious manner. 
spec SPG = Link with 
                sort Link |-> Path, Entity |-> Location, 
                pred linked |-> endpoint 
           and Time
           and MeetingSpace
then 
    sorts Trajector
    
    preds on : Location * Path
    ops source : Trajector -> Location
        goal : Trajector -> Location
        start : Trajector -> Time
        stop : Trajector -> Time
        position: Trajector * Time -> Location
    
    forall p: Path, m: Trajector, t: Time
    . endpoint(source(m),p)
    . endpoint(goal(m),p)
    . not (source(m) = goal(m))
    . start(m) < stop(m)
    . position(m,start(m)) = source(m)
    . position(m,stop(m)) = goal(m)
    . (start(m) < t /\ t < stop(m)) => on(position(m,t),p)
end

%% G0 is the least specific generalization of SPG. Because inheritance in CASL relies on the order in which specs are defined, we have to put this first. 
spec G0 = SPG 
then 
    ops foot,summit : Location
        trail : Path
        sunrise,sunset : Time
        
    . endpoint(foot,trail)
    . endpoint(summit, trail)
    . not (foot = summit)
    forall m : Trajector 
    . start(m) = sunrise
    . stop(m) = sunset
end

%% G is more specific than G0. The out-commented lines are inherited and do not need to be specified manually. I left them as comments, because in our ``toolchain setting'' we start with G and generalize to G0. Hence, it would be more intuitive to specify G first, and then tell HETS which part of the structure to ``forget''. However, this is currently not possible in HETS. 
spec G = G0
then
    sort Day
    sort TimeOfDay
    
    ops %% foot,summit : Location
        %% trail: Path
        d: Day
        sunrise, sunset : TimeOfDay
        time: Day * TimeOfDay -> Time
    
    %% . endpoint(foot,trail)
    %% . endpoint(summit,trail)
    %% . not (foot = summit)
    %% forall m : Trajector
    %% . start(m) = time(d,sunrise)
    %% . stop(m) = time(d,sunset)
end

%% I10 is the following specialization of G0. Again, I left the out-commented lines which will be inherited from G0. 
spec I10 = G0
then
    ops %% foot,summit : Location
        %% trail : Path
        monk : Trajector
        %% sunrise,sunset : Time
    
    %% . endpoint(foot,trail)
    %% . endpoint(summit,trail)
    %% . not (foot = summit)
    . source(monk) = foot
    . goal(monk) = summit
    %% . start(monk) = sunrise
    %% . stop(monk) = sunset
end

%% I20 is analogous to I10; note however that here we have the source summit and the goal foot, while in I10 this is vice versa.
spec I20 = G0
then 
    ops %% foot,summit : Location
        %% trail : Path
        monk : Trajector
        %% sunrise,sunset : Time
    
    %% . endpoint(foot,trail)
    %% . endpoint(summit,trail)
    %% . not (foot = summit)
    . source(monk) = summit
    . goal(monk) = foot
    %% . start(monk) = sunrise
    %% . stop(monk) = sunset
end

%% These views define the (total) morphisms from G0 to I10 and I20. These are the inputs for the blend. 
view G0ToI10 : G0 to I10
view G0ToI20 : G0 to I20

%% We also need to specify morphisms from the MeetingSpace to I10, I20. This is similar to Goguen (2006)'s approach. 
view MeetToI10 : MeetingSpace to I10
view MeetToI20 : MeetingSpace to I20

%% Finally we can do the blend, by combining all four morphisms. The axiom states, that in the blend there exists a time and a place where they meet. The keyword "%implied" denotes that this axiom should emerge from the theory. When running hets and right-clicking on the bend, there will be a proof goal available so that the axiom can be verified. 
spec Blend =
     combine G0ToI10,G0ToI20,MeetToI10,MeetToI20
then 
    forall m1,m2 : Trajector . exists t: Time, l: Location 
		. position(m1,t) = l /\ position(m2,t) = l %implied
end

%% I1 is a specialization of G. It is also more special than I10. However, note that in terms of our ``toolchain temporal order'' I1 is there first and I10 is derived from it, however, since generalizing is not possible with hets, we have to state is this way.
spec I1 = G and I10
then 
    sort Day
    sort TimeOfDay
    
    ops foot, summit : Location;
        trail: Path;
        monk: Trajector;
        d1: Day;
        sunrise,sunset:TimeOfDay;
        time: Day * TimeOfDay -> Time
    
    . endpoint(foot,trail)
    . endpoint(summit,trail)
    . not (foot = summit)
    . source(monk) = foot
    . goal(monk) = summit
    . start(monk) = time(d1,sunrise)
    . stop(monk) = time(d1,sunset)

end

%% I2 is similar to I1. Again, note that here the source is the foot and the goal is the summit, while in I1 this is vice versa. 
spec I2 = G and I20
then 
    sort Day
    sort TimeOfDay
    
    ops foot, summit : Location;
        trail: Path;
        monk: Trajector;
        d2: Day;
        sunrise,sunset:TimeOfDay;
        time: Day * TimeOfDay -> Time
    
    . endpoint(foot,trail)
    . endpoint(summit,trail)
    . not (foot = summit)
    . source(monk) = foot
    . goal(monk) = summit
    . start(monk) = time(d2,sunrise)
    . stop(monk) = time(d2,sunset)
end











