%% The Link schema is similar to Marco's spec, but "Entity" is a proper sort
spec Link =
    sorts Link
          Entity
    preds linked : Entity * Link
    
    forall l: Link . exists e1: Entity, e2: Entity . 
        not e1 = e2 /\ linked(e1,l) /\ linked(e2,l) /\ 
        not exists e3: Entity . 
            (not e3 = e1 /\ not e3 = e2 /\ linked(e3,l))
end
%% The Time schema is as in Marco's spec.
spec Time =
    sorts Time
    preds __<__ : Time * Time
end

%% This schema represents the commonsense knowledge, that if two trajectors move in the opposite direction, they will meet at a certain meetingLocation at a certain meetingTime. Goguen (2006) uses a similar approach. Explicitly representing this is a bit of cheating, but I found no other simple solution. In fact, it would be great to have a sophisitcated formalization of continuous movement. Continuos movement should be an extension of the startLoc-Path-endLoc image schema. MeetingSpace inherits structure from Time (denoted by "= Time then")


%% This is the main SOURCE-PATH-GOAL (SPG) image schema. It inherits structure from Link, Time and MeetingSpace. The translation from Link to SPG that Marco mentions is formalized using the "with" keyword, in the obvious manner. 
spec SPG = Link with 
                sort Link |-> Path, Entity |-> Location, 
                pred linked |-> endpoint 
           and Time
then 
    sorts Trajector
    
    preds on : Location * Path
    ops startLoc : Trajector -> Location
        endLoc : Trajector -> Location
        startTime : Trajector -> Time
        endTime : Trajector -> Time
        position: Trajector * Time -> Location
    
    forall p: Path, m: Trajector, t: Time
    . endpoint(startLoc(m),p) /\  endpoint(endLoc(m),p)
    . not (startLoc(m) = endLoc(m))
    . startTime(m) < endTime(m)
    . position(m,startTime(m)) = startLoc(m) /\ position(m,endTime(m)) = endLoc(m)
    . (startTime(m) < t /\ t < endTime(m)) => on(position(m,t),p)
end

%% I1 and I2 are particularizations of SPG, where we have the additional sorts Day and TimeOf Day, as well as some new operators. Note that In I1 the startLoc is the foot and the endLoc is the summit, while in I2 this is vice versa. 

spec I1 = SPG
then 
    sort Day
    sort TimeOfDay
    
    ops foot, summit : Location;
        trail: Path;
        monk: Trajector;
        d1: Day;
        sunrise,sunset:TimeOfDay;
        time: Day * TimeOfDay -> Time
    
    . endpoint(foot,trail) /\ endpoint(summit,trail)
    %% . not (foot = summit)
    . startLoc(monk) = foot /\ endLoc(monk) = summit
    . startTime(monk) = time(d1,sunrise) /\ endTime(monk) = time(d1,sunset)
end

spec I2 = SPG
then 
    sort Day
    sort TimeOfDay
    
    ops foot, summit : Location;
        trail: Path;
        monk: Trajector;
        d2: Day;
        sunrise,sunset:TimeOfDay;
        time: Day * TimeOfDay -> Time
    
    . endpoint(foot,trail) /\ endpoint(summit,trail)
    %% . not (foot = summit)
    . startLoc(monk) = foot /\ endLoc(monk) = summit
    . startTime(monk) = time(d2,sunrise) /\ endTime(monk) = time(d2,sunset)
end

spec G = SPG
then 
    sorts Day
	      TimeOfDay
    
    ops foot,summit : Location
        trail: Path
        d: Day
        sunrise, sunset : TimeOfDay
        time: Day * TimeOfDay -> Time
    
    . endpoint(foot,trail) /\ endpoint(summit,trail)
    %% . not (foot = summit)
    forall m : Trajector
    . startTime(m) = time(d,sunrise) /\ endTime(m) = time(d,sunset)
end

%% Blending I1, I2 and G requires a generalization, where Day is neglected and TimeOfDay becomes just Time. Also, d is mapped to d1, d2, respectively. Towards this we generalize I1, I2 and G. 


%% I10 is the following specialization of G0. Again, I left the out-commented lines which will be inherited from G0. 
spec I10 = SPG
then
    ops 
		foot,summit : Location
        trail : Path
        monk : Trajector
        sunrise,sunset : Time
    
    . endpoint(foot,trail) /\ endpoint(summit,trail)
    %% . not (foot = summit)
    . startLoc(monk) = foot /\ endLoc(monk) = summit
    . startTime(monk) = sunrise /\ endTime(monk) = sunset
end

%% I20 is analogous to I10; note however that here we have the startLoc summit and the endLoc foot, while in I10 this is vice versa.
spec I20 = SPG
then 
    ops 
		foot,summit : Location
        trail : Path
        monk : Trajector
        sunrise,sunset : Time
    
    . endpoint(foot,trail) /\ endpoint(summit,trail)
    %% . not (foot = summit)
    . startLoc(monk) = summit /\ endLoc(monk) = foot
    . startTime(monk) = sunrise /\ endTime(monk) = sunset
end

%% G0i is the pullback of the diagram I0i -> Ii <- G. It happens that G01=G02 in the case of the buddhist monks riddle.
spec G0 = SPG 
then 
    ops foot,summit : Location
        trail : Path
        sunrise,sunset : Time
        
    . endpoint(foot,trail) /\ endpoint(summit, trail)
    %% . not (foot = summit)
    forall m : Trajector 
    . startTime(m) = sunrise /\ endTime(m) = sunset
end

%% These views define the (total) morphisms from G0 to I10 and I20. These are the inputs for the blend. 
view G0ToI10 : G0 to I10
view G0ToI20 : G0 to I20


%% Finally we can do the composition part of the blend, by combining both morphisms. 
spec Blend_composition =
     combine G0ToI10,G0ToI20
%% then 
    %% forall m1,m2 : Trajector . exists t: Time, l: Location 
		%% . position(m1,t) = l /\ position(m2,t) = l %implied
end

%% Running the blend involves completion. In the case of the riddle, we complete it by adding the backgound knowledge that two trajectors that approach each other will necessarily meet at some point. This is described in the following MeetingSpace theory: 

spec MeetingPoint = Time
then
    sorts Trajector 
          Location
    ops startLoc: Trajector -> Location
        endLoc: Trajector -> Location
        startTime: Trajector -> Time
        endTime : Trajector -> Time
        position: Trajector * Time -> Location
    
    forall m1,m2 : Trajector 
        . (startLoc(m1) = endLoc(m2) /\ endLoc(m2) = startLoc(m1) /\ 
           startTime(m1) = startTime(m2))
           => ( exists meetingLoc : Location, meetingTime : Time 
				. position(m1,meetingTime) = meetingLoc /\ position(m2,meetingTime) = meetingLoc)
end

%% Now the composed blend is completed with the background knowledge. 
spec Blend_completion = Blend_composition and MeetingPoint end

%% The elaboration of the blend involves its mental simulation. We can not really perform the simulation in casl, but we can prove predefined axioms. The following axiom states, that in the blend there exists a time and a place where they meet. The keyword "%implied" denotes that this axiom should emerge from the theory. When running hets and right-clicking on the blend, the axiom is displayed as a proof goal so that it can be verified. 
spec Blend_elaboration = Blend_completion
then
    forall m1,m2 : Trajector . exists t: Time, l: Location 
		. position(m1,t) = l /\ position(m2,t) = l %implied
end










