spec Gen = 
%%  Note can be interpreted as an absolute note
%%  Or an interval
    free type Note ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | x | x1
%% can describe interals in the following way
    free type Modifier ::= major | minor | diminished | perfect | augmented
%% these operators act on intervals
%% e.g. a fifth + a fifth = a ninth
%% start at a C, go up a fith, you get to G
%% go up a fifth from G, you get to D
%% so an interval which is 7, plus another, you get 2
    ops __ + __: Note * Note -> Note
        __ - __: Note * Note -> Note

end

 spec Symbols = 
 
 generated type Note ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | x | x1
 generated type Modifier ::= major | minor | diminished | perfect | augmented
 op __+__ : Note * Note -> Note
 op suc : Note -> Note 
 
 . suc(0) = 1
 . suc(1) = 2
 . suc(2) = 3
 . suc(3) = 4
 . suc(4) = 5
 . suc(5) = 6
 . suc(6) = 7
 . suc(7) = 8
 . suc(8) = 9
 . suc(9) = x
 . suc(x) = x1
 . suc(x1) = 0

  . not major = minor
  . not major = diminished 
  . not major = perfect
  . not major = augmented
  . not minor = diminished
  . not minor = perfect
  . not minor = augmented
  . not diminished = perfect
  . not diminished = augmented
  . not perfect = augmented

    . not 0 = 1
    . not 0 = 2
    . not 0 = 3 
    . not 0 = 4
    . not 0 = 5
    . not 0 = 6
    . not 0 = 7
    . not 0 = 8
    . not 0 = 9 
    . not 0 = x
    . not 0 = x1
 forall c, d: Note 
    . suc(c) = 0 => c = x1
    . suc(c) = suc (d) => c = d
    . c + 0 = x
    . c + suc(d) = suc(c+d)
end

spec RelChord = 
Symbols then
%% primary sort for RelChord 
    sort RelChord 

%% a chord can be defined via relative positions from the root 
    preds    
        hasRelNote : RelChord * Note
    ops
%% thirdrel is a partial function defining the third (minor, major)
%% bassrel determine which note is in the bass - this must be in the chord
%% this guarantees one note at least
        thirdrel: RelChord ->? Modifier                   %(thirdrel_def)%  
        bassrel: RelChord -> Note                         %(bassrel_def)%
%% other potential interesting functions?
        seventhrel:RelChord ->? Modifier                 %(seventhrel_def)%
        sixthrel:RelChord ->? Modifier                    %(sixthrel_def)%
        fifthrel: RelChord ->? Modifier                   %(fifthrel_def)%

%% these are definitions for what each modifier means in terms of notes
%% e.g. a perfect fifth is a note interval of 7 (semitones)
 forall c:RelChord,n:Note
       . bassrel(c)=n => hasRelNote(c,n)                %(bassrel)%  
       . thirdrel(c) = minor => hasRelNote(c,3)         %(minor3rel)%
       . thirdrel(c) = major => hasRelNote(c,4)         %(major3rel)%
       . seventhrel(c) = minor => hasRelNote(c,x)       %(minor7rel)%
       . seventhrel(c) = major => hasRelNote(c,x1)      %(major7rel)%
       . sixthrel(c) = minor => hasRelNote(c,8)         %(minor6rel)%
       . sixthrel(c) = major => hasRelNote(c,9)         %(major6rel)%
       . fifthrel(c) = perfect => hasRelNote(c,7)       %(perfect5rel)%
       . fifthrel(c) = diminished => hasRelNote(c,6)    %(dimin5rel)%
       . fifthrel(c) = augmented => hasRelNote(c,8)     %(augment5rel)%
end

spec AbsChord = 
RelChord then 
%% primary sort for RelChord 
     sort AbsChord < RelChord

     preds
        hasAbsNote: AbsChord * Note                       
     ops
%% here absolute note positions are defined for specific chords
        root: AbsChord -> Note                                 %(root_def)%
%% this axiom relate relative to absolute note positions
    forall c:AbsChord,n:Note    
       . hasRelNote(c,n) <=> hasAbsNote(c,(root(c)+n))         %(reltoabs_note)%
end

%%% CADENCE
%% this is simply two chords, and relation between them
%% rootRel means the relation between the first and second
%% e.g. rootRel(G major,C major) = 7
spec Cadence = 
  RelChord then
  ops prefinal: RelChord
      final: RelChord
      rootRel: RelChord * RelChord -> Note
end

%%% PERFECT CADENCE
%% This is the specification of a perfect Cadence
spec PerfectCadence = 
  Cadence then 
    . rootRel(prefinal,final) = 7   %%this is of low importance
    . hasRelNote(prefinal,0)
    . hasRelNote(prefinal,4)
    . hasRelNote(prefinal,7)
    . hasRelNote(prefinal,x)
    . hasRelNote(final,0)
    . hasRelNote(final,7)
    . fifthrel(final) = perfect
    . fifthrel(prefinal) = perfect
    . seventhrel(prefinal) = minor
    . thirdrel(prefinal) = major
end 

%% WEAKENED PERFECT CADENCE
%% here is a weaekend version
spec GenPerfectCadence = 
  Cadence then
    . hasRelNote(prefinal,0)
    . hasRelNote(prefinal,4)
    . hasRelNote(prefinal,7)
    . hasRelNote(prefinal,x)
    . hasRelNote(final,0)
    . hasRelNote(final,7)
    . fifthrel(final) = perfect
    . fifthrel(prefinal) = perfect
    . seventhrel(prefinal) = minor
    . thirdrel(prefinal) = major
end 

%%% PHRYGIAN CADENCE
spec PhrygianCadence = 
  Cadence then
    . rootRel(prefinal,final) = x  %%of high importance
    . hasRelNote(prefinal,0)
    . hasRelNote(prefinal,3)
    . hasRelNote(prefinal,7)
    . hasRelNote(final,0)
    . hasRelNote(final,7)
    . fifthrel(final) = perfect
    . fifthrel(prefinal) = perfect
    . thirdrel(prefinal) = minor  %% of low importance
end

%% weakened version 
spec GenPhrygianCadence = 
  Cadence then
    . rootRel(prefinal,final) = x
    . hasRelNote(prefinal,0)
    . hasRelNote(prefinal,7)
    . hasRelNote(final,0)
    . hasRelNote(final,7)
    . fifthrel(final) = perfect
    . fifthrel(prefinal) = perfect
end

%%% ABS_CADENCE
%% an absolute cadence is a cadence which is made absolute by fixing the root
%% the root of the prefinal can be calculated from the the rootRel function
spec AbsCadence = 
  Cadence then
  AbsChord then
  op finalroot: Note
  .  root(final as AbsChord) = finalroot  
  .  root(prefinal as AbsChord) = finalroot + rootRel(prefinal,final)
end

%% a C perfect cadence is a perfect cadence
%% inheriting also an absolute cadence
%% which is has final root fixed at (0) C
spec CPerfectCadence = 
   AbsCadence then
   PerfectCadence then
   . root(final as AbsChord) = 0
end

%%% weakened version
spec GenCPerfectCadence = 
   AbsCadence then
   GenPerfectCadence then
   . root(final as AbsChord) = 0
end

%% Phrygian cadence with final root fixed at 0
spec CPhrygianCadence = 
    AbsCadence then
    PhrygianCadence then
    . root(final as AbsChord) = 0
end

%% weakened version
spec GenCPhrygianCadence = 
    AbsCadence then
    GenPhrygianCadence then
    . root(final as AbsChord) = 0
end

%% here is that which is common to both cadences
%% this consitutes a generic space for the cadence blend
%% the cadence means all specs have two chords
spec GenericCadence = 
  AbsCadence then
  . root(final as AbsChord) = 0
  . hasRelNote(final,0)
  . hasRelNote(final,7)
  . hasRelNote(prefinal,0)
  . hasRelNote(prefinal,7)
  . fifthrel(final) = perfect
  . fifthrel(prefinal) = perfect
end

%% here is different generic space which associates only one chord in common
%% the input theories have two chords, the generic 1
%% this means the pushout will have 3 - a progression
spec GenericChordProgression = 
  RelChord then
  op c: RelChord
  op GenericrootRel: RelChord * RelChord -> Note
  . hasRelNote(c,0)
  . hasRelNote(c,7)
  . fifthrel(c) = perfect
end


%% an alternative generic space for specifying two chords 
spec GenericChordCadence = 
  AbsChord then
  ops c,d:RelChord
  op GenericrootRel: RelChord * RelChord -> Note
  op Genericroot: Note
  . hasRelNote(c,0)
  . hasRelNote(c,7)
  . fifthrel(c) = perfect
  . hasRelNote(d,0)
  . hasRelNote(d,7)
  . fifthrel(d) = perfect
  . root(d as AbsChord) = 0
end


interpretation I1: GenericCadence to CPerfectCadence
interpretation I2: GenericCadence to CPhrygianCadence

interpretation I3: GenericCadence to GenCPerfectCadence
interpretation I4: GenericCadence to GenCPhrygianCadence

interpretation I5: GenericChordProgression to CPhrygianCadence =
   c |-> final,
   GenericrootRel |-> rootRel
   
interpretation I6: GenericChordProgression to PerfectCadence =
  c |-> prefinal,
  GenericrootRel |-> rootRel

interpretation I7: GenericChordCadence to GenCPerfectCadence =
  c |-> prefinal,
  d |-> final,
  GenericrootRel |-> rootRel,
  Genericroot |-> finalroot

interpretation I8: GenericChordCadence to GenCPhrygianCadence =
  c |-> prefinal,
  d |-> final,
  GenericrootRel |-> rootRel,
  Genericroot |-> finalroot

spec cadence_blend_from_shared_chords = combine I7,I8

spec inconsistent_blend = combine I1,I2

spec generalised_blend = combine I3,I4

spec progression = combine I5,I6

spec BackdoorCadence = 
  Cadence then
    . rootRel(prefinal,final) = x
    . hasRelNote(prefinal,0)
    . hasRelNote(prefinal,4)
    . hasRelNote(prefinal,7)
    . hasRelNote(prefinal,x)
    . hasRelNote(final,0)
    . hasRelNote(final,7)
    . fifthrel(final) = perfect
    . fifthrel(prefinal) = perfect
    . thirdrel(prefinal) = major
    . seventhrel(prefinal) = minor
end

spec CBackdoorCadence = 
    AbsCadence then
    BackdoorCadence then
    . root(final as AbsChord) = 0
end


interpretation ref1: generalised_blend to CBackdoorCadence

interpretation ref2: cadence_blend_from_shared_chords to CBackdoorCadence